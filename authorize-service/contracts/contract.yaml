openapi: 3.0.3
info:
  title: ICS Input Data API
  description: |
    ## Input Data API

    The Input Data API is the part of the R.Franco ICS resposible for:

      * Retrieving casino operation data from operators, player account systems or game providers.
      * Providing casino operation data to the generation of regulator reports.

    As a data provider (casino operator, player account system or game provider) you must mainly focus in the `POST` operations, which are the ones that create data in the system. Though you can also use the `GET` operations for consultation, they are mainly intended to be used in the generation of reports.

    ## Regulated Markets

    The Input Data API currently supports the following regulated markets:

      * Spain
      * Colombia
      * Portugal

    Some of the casino operation entities (payments, adjustments, etc.) are not reported in every regulated market. In addition, the amount of information required for each entity may vary from regulated market to regulated market. Please, read the documentation of each operation in this API in order to determine whether the operation is mandatory in the regulated market you are operating in, and what entity porperties you must provide.

    ## Data Order

    Some of the different entities that define the casino operation are related. For instance, a participation (participation of a player in a game) must always be related to a specific player, or a participation unit (individual bet performed or prize received by a player) must always be related to a participation (that is, a player performs bets in the context of a participation in a game).

    When providing casino operation data to the Input Data API it is important to take the data relationships into account: providing data that is related to other entities that have not been provided yet will be considered as an error by the Input Data API. For instance, providing the personal data of a player that has not been created or defining participation units (bets and winnings) from a participation that has not been declared will result in an error. For these cases the Input Data API will return a `404 (not found)` status code, indicating that the referred entity cannot be found.

    The following enumeration depicts the order in which casino operation entities must be specified to the Input Data API. Entities in each level depend on entities in previous levels and therefore they must be posted to the API after the entities they depend on have already been declared in the system.

    1. Players, jackpots and bet events.
    2. Player log-ins, player personal documents and identity verifications, player deposit limits, player personal data, player self-exclusions, player aliases, player wallets and player statuses.
    3. Participations, adjustments, payments (deposits and withdrawals).
    4. Participation units, jackpot units and player wallet balances.

  version: " 2.20.1"
paths:
  /participations/slots:
    get:
      operationId: getSlotsParticipations
      summary: Slots participations.
      description: |
        This operation retrieves information about player participations in slots games.
      parameters:
        - $ref: "#/components/parameters/minimumId"
        - $ref: "#/components/parameters/maximumId"
        - $ref: "#/components/parameters/minFinishDate"
        - $ref: "#/components/parameters/maxFinishDate"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Participations
      responses:
        200:
          description: Successful request. A page of participations is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlotsParticipationPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/roulette:
    get:
      operationId: getRouletteParticipations
      summary: Roulette participations.
      description: |
        This operation retrieves information about player participations in roulette games.
      parameters:
        - $ref: "#/components/parameters/minimumId"
        - $ref: "#/components/parameters/maximumId"
        - $ref: "#/components/parameters/minFinishDate"
        - $ref: "#/components/parameters/maxFinishDate"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Participations
      responses:
        200:
          description: Successful request. A page of participations is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouletteParticipationPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/poker_tournament:
    get:
      operationId: getPokerTournamentParticipations
      summary: Poker tournament participations.
      description: |
        This operation retrieves information about player participations in poker tournament games.
      parameters:
        - $ref: "#/components/parameters/minimumId"
        - $ref: "#/components/parameters/maximumId"
        - $ref: "#/components/parameters/minFinishDate"
        - $ref: "#/components/parameters/maxFinishDate"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Participations
      responses:
        200:
          description: Successful request. A page of participations is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PokerTournamentParticipationPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/poker_cash:
    get:
      operationId: getPokerCashParticipations
      summary: Poker cash participations.
      description: |
        This operation retrieves information about player participations in poker cash games .
      parameters:
        - $ref: "#/components/parameters/minimumId"
        - $ref: "#/components/parameters/maximumId"
        - $ref: "#/components/parameters/minFinishDate"
        - $ref: "#/components/parameters/maxFinishDate"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Participations
      responses:
        200:
          description: Successful request. A page of participations is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PokerCashParticipationPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/baccarat:
    get:
      operationId: getBaccaratParticipations
      summary: Baccarat participations.
      description: |
        This operation retrieves information about player participations in baccarat games.
      parameters:
        - $ref: "#/components/parameters/minimumId"
        - $ref: "#/components/parameters/maximumId"
        - $ref: "#/components/parameters/minFinishDate"
        - $ref: "#/components/parameters/maxFinishDate"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Participations
      responses:
        200:
          description: Successful request. A page of participations is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaccaratParticipationPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/complementary:
    get:
      operationId: getComplementaryParticipations
      summary: Complementary participations.
      description: |
        This operation retrieves information about player participations in complementary games.
      parameters:
        - $ref: "#/components/parameters/minimumId"
        - $ref: "#/components/parameters/maximumId"
        - $ref: "#/components/parameters/minFinishDate"
        - $ref: "#/components/parameters/maxFinishDate"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Participations
      responses:
        200:
          description: Successful request. A page of participations is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComplementaryParticipationPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/black_jack:
    get:
      operationId: getBlackJackParticipations
      summary: Blackjack participations.
      description: |
        This operation retrieves information about player participations in blackjack games.
      parameters:
        - $ref: "#/components/parameters/minimumId"
        - $ref: "#/components/parameters/maximumId"
        - $ref: "#/components/parameters/minFinishDate"
        - $ref: "#/components/parameters/maxFinishDate"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Participations
      responses:
        200:
          description: Successful request. A page of participations is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlackjackParticipationPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/bingo:
    get:
      operationId: getBingoParticipations
      summary: Bingo participations.
      description: |
        This operation retrieves information about player participations in bingo games.
      parameters:
        - $ref: "#/components/parameters/minimumId"
        - $ref: "#/components/parameters/maximumId"
        - $ref: "#/components/parameters/minFinishDate"
        - $ref: "#/components/parameters/maxFinishDate"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Participations
      responses:
        200:
          description: Successful request. A page of participations is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BingoParticipationPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/bets:
    get:
      operationId: getBetParticipations
      summary: Bet participations.
      description: |
        This operation retrieves information about player participations in bet games.
      parameters:
        - name: participationId
          in: query
          description: "If specified, only the participation whose id matches the specified value will be returned."
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: minParticipationUnitId
          in: query
          description: "If specified, only participations with participation units whose id is greater than the specified value will be returned."
          required: false
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: maxParticipationUnitId
          in: query
          description: "If specified, only participations with participation units whose id is less than or equal to the specified value will be returned."
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: minTransactionDate
          in: query
          description: "If specified, only participations with participation units performed at or after the specified date will be returned. This date must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: maxTransactionDate
          in: query
          description: "If specified, only participations with participation units performed before the specified date will be returned. This date must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withEventsFinishingAfter
          in: query
          description: "If specified, only participations with events finishing after the specified date and time will be returned. This date and time must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withEventsFinishingBefore
          in: query
          description: "If specified, only participations with events finishing before the specified date and time will be returned. This date and time must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: ticketExternalId
          in: query
          description: "If specified, only participations whose ticketExternalId matches the given value will be returned."
          required: false
          schema:
            type: string
        - name: gameType
          in: query
          description: "If specified, only participations with game type matching the given value will be returned."
          required: false
          schema:
            $ref: "#/components/schemas/GameType"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Participations
      responses:
        200:
          description: Successful request. A page of participations is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetParticipationPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/ids:
    get:
      operationId: getParticipationIdsByGameTypeAndDates
      summary: Get Participations ids by GameType and Dates.
      description: |
        This operation retrieves ids of the participations in bet games by GameType.
      parameters:
        - name: minTransactionDate
          in: query
          description: "If specified, only participations with participation units performed at or after the specified date will be returned. This date must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)."
          required: true
          schema:
            type: string
            format: date-time
        - name: maxTransactionDate
          in: query
          description: "If specified, only participations with participation units performed before the specified date will be returned. This date must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)."
          required: true
          schema:
            type: string
            format: date-time
        - name: gameType
          in: query
          description: "If specified, only participations with game type matching the given value will be returned."
          required: true
          schema:
            $ref: "#/components/schemas/GameType"
      tags:
        - Participations
      responses:
        200:
          description: Successful request. A list of participationIds is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipationIdList'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /player/{playerExternalId}/participations/bets:
    post:
      operationId: saveBetParticipation
      summary: Bet participations.
      description: |
        This operation creates or updates a bet participation for a player. If a bet participation, or bet fact inside a participation, is received with an already existing identifier then the already existing entity will be updated with the new values.

        ![Warning](https://openclipart.org/image/24px/svg_to_png/29833/warning.png) This operation is currently only available for the Colombian and Spanish regulated market.

        The following are the game types accepted by regulated market:

        * Spain: `SportsFixedOddsBet`, `OtherFixedOddsBet`, `HorseFixedOddsBet`, `ParimutuelSportsBet`, `ParimutuelHorseBet`, `SportsBetExchange`, `HorseBetExchange` and `OtherBetExchange`.
        * Colombia: `SportsFixedOddsBet`, `SportsBetExchange`, `OtherFixedOddsBet` and `OtherBetExchange`.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BetParticipationCreationRequest'
      tags:
        - Participations
      responses:
        201:
          description: Successful request. The bet participation was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. No players or no bet events can be found matching the given identifiers.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /player/{playerExternalId}/participations/roulette:
    post:
      operationId: saveRouletteParticipation
      summary: Roulette participations.
      description: |
        This operation creates or updates a roulette participation for a player. If a roulette participation is received with an already existing identifier then the already existing participation will be updated with the new values.

        ![Warning](https://openclipart.org/image/24px/svg_to_png/29833/warning.png) This operation is currently only avaiable for the Colombian and Spanish regulated markets.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouletteParticipationCreationRequest'
      tags:
        - Participations
      responses:
        201:
          description: Successful request. The roulette participation was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. No players can be found matching the given identifier.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /player/{playerExternalId}/participations/slots:
    post:
      operationId: saveSlotsParticipation
      summary: Slots participations.
      description: |
        This operation creates or updates a slots participation for a player. If a slots participation is received with an already existing identifier then the already existing participation will be updated with the new values.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlotsParticipationCreationRequest'
      tags:
        - Participations
      responses:
        201:
          description: Successful request. The slots participation was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. No players can be found matching the given identifier.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /player/{playerExternalId}/participations/bingo:
    post:
      operationId: saveBingoParticipation
      summary: Bingo participations.
      description: |
        This operation creates or updates a bingo participation for a player. If a bingo participation is received with an already existing identifier then the already existing participation will be updated with the new values.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BingoParticipationCreationRequest'
      tags:
        - Participations
      responses:
        201:
          description: Successful request. The bingo participation was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. No players can be found matching the given identifier.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /player/{playerExternalId}/participations/complementary:
    post:
      operationId: saveComplementaryParticipation
      summary: Complementary participations.
      description: |
        This operation creates or updates a complementary participation for a player. If a complementary participation is received with an already existing identifier then the already existing participation will be updated with the new values.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComplementaryParticipationCreationRequest'
      tags:
        - Participations
      responses:
        201:
          description: Successful request. The bingo participation was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. No players can be found matching the given identifier.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /player/{playerExternalId}/participations/blackjack:
    post:
      operationId: saveBlackjackParticipation
      summary: Blackjack participations.
      description: |
        This operation creates or updates a blackjack participation for a player. If a blackjack participation is received with an already existing identifier then the already existing participation will be updated with the new values.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlackjackParticipationCreationRequest'
      tags:
        - Participations
      responses:
        201:
          description: Successful request. The blackjack participation was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. No players can be found matching the given identifier.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /player/{playerExternalId}/participations/baccarat:
    post:
      operationId: saveBaccaratParticipation
      summary: Baccarat participations.
      description: |
        This operation creates or updates a baccarat participation for a player. If a baccarat participation is received with an already existing identifier then the already existing participation will be updated with the new values.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaccaratParticipationCreationRequest'
      tags:
        - Participations
      responses:
        201:
          description: Successful request. The baccarat participation was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. No players can be found matching the given identifier.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /player/{playerExternalId}/participations/pokercash:
    post:
      operationId: savePokerCashParticipation
      summary: Poker cash participations.
      description: |
        This operation creates or updates a poker cash participation for a player. If a poker cash participation is received with an already existing identifier then the already existing participation will be updated with the new values.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PokerCashParticipationCreationRequest'
      tags:
        - Participations
      responses:
        201:
          description: Successful request. The poker cash participation was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. No players can be found matching the given identifier.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /player/{playerExternalId}/participations/pokertournament:
    post:
      operationId: savePokerTournamentParticipation
      summary: Poker tournament participations.
      description: |
        This operation creates or updates a poker torunament participation for a player. If a poker tournament participation is received with an already existing identifier then the already existing participation will be updated with the new values.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PokerTournamentParticipationCreationRequest'
      tags:
        - Participations
      responses:
        201:
          description: Successful request. The poker tournament participation was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. No players can be found matching the given identifier.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.

  /participations/units:
    get:
      operationId: getParticipationUnits
      summary: Participation units.
      description: |
        This operation retrieves pages of participation units filtered by different optional criteria.
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - $ref: "#/components/parameters/unitType"
        - $ref: "#/components/parameters/gameTypes"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/transactionType"
        - $ref: "#/components/parameters/nonDeletedAtDateTime"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - ParticipationUnits
      responses:
        200:
          description: Successful request. A page of participation units is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipationUnitPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/units/player_balance_to_date:
    get:
      operationId: getPlayerBalanceToDate
      summary: Player's balance on the indicated date. ( only participations )
      description: |
        This operation recovers the player's balance until the indicated date, without taking into account the previous deposits and withdrawals
      parameters:
        - $ref: "#/components/parameters/dateTime"
        - $ref: "#/components/parameters/idPlayer"
        - $ref: "#/components/parameters/unit"
      tags:
        - ParticipationUnits
      responses:
        200:
          description: Successful request. The player balance to date is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipationUnitPlayerBalance'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/units/{playerId}/total_balance_to_date:
    get:
      operationId: getPlayerTotalBalanceToDate
      summary: Player's balance on the indicated date, included previous deposits and withdrawals
      description: |
        This operation retrieves the player's balance until the indicated date, included previous deposits and withdrawals
      parameters:
        - name: playerId
          in: path
          description: "The identifier, in the ICS, of the player that must be retrieved."
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - $ref: "#/components/parameters/unit"
      tags:
        - ParticipationUnits
      responses:
        200:
          description: Successful request. The player balance to date is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipationUnitPlayerBalance'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/units/amount/sum_by_transaction_type_unit_game_type_and_player:
    get:
      operationId: sumParticipationUnitAmountsForAllPlayers
      summary:  Participation unit amounts sum by transaction type, unit and game type for all players
      description: |
        This operation retrieves the sum of participation unit amounts filtered by date range
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
      tags:
        - ParticipationUnits
      responses:
        200:
          description: Successful request. The sum of participation unit amounts by transaction type, unit, game type and playerId is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnitsAmountSumByPlayer'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/units/ongoinggames/amount/sum_by_date_and_unit:
    get:
      operationId: sumOngoingGamesParticipationUnitAmountsByDateAndUnit
      summary: Ongoing Games Participation unit amounts sum by date and unit.
      description: |
        This operation retrieves the sum of ongoing games participation unit amounts filtered by date range period.
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - $ref: "#/components/parameters/gameTypes"
        - $ref: "#/components/parameters/transactionType"
      tags:
        - ParticipationUnits
      responses:
        200:
          description: Successful request. The sum of participation unit amounts by date and unit is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmountSumByDateAndUnit'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/units/balances/ongoinggames/sum_by_date_and_unit:
    get:
      operationId: sumOngoingGamesBalancesByDateAndUnit
      summary: Ongoing Games Balances sum by date and unit.
      description: |
        This operation retrieves the sum of player wallet balances for ongoing games by unit (`Real` or `Bonus) at specified period of time, fitered by BalanceType.
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - $ref: "#/components/parameters/gameTypes"
        - $ref: "#/components/parameters/balanceType"
      tags:
        - ParticipationUnits
      responses:
        200:
          description: Successful request. The sum of player wallet balances for ongoing games by date and unit is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmountSumByDateAndUnit'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/units/amount/sum_by_transaction_type:
    get:
      operationId: sumParticipationUnitAmountsByTransactionType
      summary: Participation unit amounts sum by transaction type.
      description: |
        This operation retrieves the sum of participation unit amounts filtered by date range and unit type.
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - $ref: "#/components/parameters/unitType"
        - $ref: "#/components/parameters/gameTypes"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/transactionType"
        - $ref: "#/components/parameters/nonDeletedAtDateTime"
      tags:
        - ParticipationUnits
      responses:
        200:
          description: Successful request. The sum of participation unit amounts by transaction type is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmountSumByTransactionType'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/units/amount/sum_by_transaction_type_and_unit:
    get:
      operationId: sumParticipationUnitAmountsByTransactionTypeAndUnit
      summary: Participation unit amounts sum by transaction type and unit.
      description: |
        This operation retrieves the sum of participation unit amounts filtered by date range and user identifier.
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - $ref: "#/components/parameters/gameTypes"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/transactionType"
      tags:
        - ParticipationUnits
      responses:
        200:
          description: Successful request. The sum of participation unit amounts by transaction type and unit is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmountSumByTransactionTypeAndUnit'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.

  /participations/units/finished/amount/sum_by_transaction_type:
    get:
      operationId: sumParticipationUnitAmountsFinishedByTransactionType
      summary: Participation unit amounts sum by transaction type.
      description: |
        This operation retrieves the sum of participation unit amounts finished filtered by date range and unit type.
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - $ref: "#/components/parameters/unitType"
        - $ref: "#/components/parameters/gameTypes"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/transactionType"
        - $ref: "#/components/parameters/nonDeletedAtDateTime"
      tags:
        - ParticipationUnits
      responses:
        200:
          description: Successful request. The sum of participation unit amounts by transaction type is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmountSumByTransactionType'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/units/resf/amount/sum_by_transaction_type:
    get:
      operationId: sumParticipationUnitAmountsResfdByTransactionType
      summary: Participation unit amounts sum by transaction type for resf files
      description: |
        This operation retrieves the sum of participation unit amounts finished filtered by date range and unit type for resf files
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - $ref: "#/components/parameters/gameTypes"
      tags:
        - ParticipationUnits
      responses:
        200:
          description: Successful request. The sum of participation unit amounts for resf files by transaction type is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmountSumByTransactionType'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/units/amount/sum_by_player_id:
    get:
      operationId: sumParticipationUnitAmountsByPlayerId
      summary: Participation unit amounts sum by player id.
      description: |
        This operation retrieves the sum of participation unit amounts grouped by player id and filtered by different optional criteria.
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - $ref: "#/components/parameters/unitType"
        - $ref: "#/components/parameters/gameTypes"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/transactionType"
        - $ref: "#/components/parameters/nonDeletedAtDateTime"
        - $ref: "#/components/parameters/minimumAmountSum"
      tags:
        - ParticipationUnits
      responses:
        200:
          description: Successful request. The sum of participation unit amounts grouped by player id is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmountSumByPlayerId'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/units/game_types:
    get:
      operationId: getParticipationUnitGameTypes
      summary: Game types from participation units.
      description: |
        This operation retrieves a list of game types from participation units (participations of players in games).
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - $ref: "#/components/parameters/unitType"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/transactionType"
        - $ref: "#/components/parameters/nonDeletedAtDateTime"
      tags:
        - ParticipationUnits
      responses:
        200:
          description: Successful request. A list of game types from participation units is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameType'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /participations/{participationExternalId}/units:
    post:
      operationId: saveParticipationUnit
      summary: Bet participations.
      description: |
        This operation creates or updates a participation unit. If a participation unit is received with an already existing identifier then the already existing entity will be updated with the new values.
      parameters:
        - name: participationExternalId
          in: path
          description: "Identifier, in the player account system, of the participation."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipationUnitCreationRequest'
      tags:
        - ParticipationUnits
      responses:
        201:
          description: Successful request. The participation unit was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. No participations can be found matching the given identifier.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /tournaments/bingo:
    get:
      operationId: getBingoTournaments
      summary: Bingo tournaments.
      description: |
        This operation retrieves information about bingo tournaments.
      parameters:
        - $ref: "#/components/parameters/minimumId"
        - $ref: "#/components/parameters/maximumId"
        - $ref: "#/components/parameters/minFinishDate"
        - $ref: "#/components/parameters/maxFinishDate"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Tournaments
      responses:
        200:
          description: Successful request. A page of tournaments is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BingoTournamentPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
    post:
      operationId: saveBingoTournament
      summary: Bingo tournaments.
      description: |
        This operation creates or updates a bingo tournament. If a bingo tournament, is received with an already existing identifier then the already existing entity will be updated with the new values.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BingoTournamentCreationRequest'
      tags:
        - Tournaments
      responses:
        201:
          description: Successful request. The bingo torunament was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /tournaments/poker:
    get:
      operationId: getPokerTournaments
      summary: Poker tournaments.
      description: |
        This operation retrieves information about poker tournaments.
      parameters:
        - $ref: "#/components/parameters/minimumId"
        - $ref: "#/components/parameters/maximumId"
        - $ref: "#/components/parameters/minFinishDate"
        - $ref: "#/components/parameters/maxFinishDate"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Tournaments
      responses:
        200:
          description: Successful request. A page of tournaments is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PokerTournamentPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
    post:
      operationId: savePokerTournament
      summary: Poker tournaments.
      description: |
        This operation creates or updates a poker tournament. If a poker tournament, is received with an already existing identifier then the already existing entity will be updated with the new values.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PokerTournamentCreationRequest'
      tags:
        - Tournaments
      responses:
        201:
          description: Successful request. The poker torunament was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /tournaments/bet:
    get:
      operationId: getBetTournaments
      summary: Bet tournaments.
      description: |
        This operation retrieves information about bet tournaments.
      parameters:
        - $ref: "#/components/parameters/minimumId"
        - $ref: "#/components/parameters/maximumId"
        - $ref: "#/components/parameters/minFinishDate"
        - $ref: "#/components/parameters/maxFinishDate"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - name: gameType
          in: query
          schema:
            type: string
            enum: [ParimutuelSportsBet, ParimutuelHorseBet]
          description: "If specified, only items whose game type matches the one specified will be accounted for. Only following game types are valid: ParimutuelSportsBet and ParimutuelHorseBet"
          required: true
      tags:
        - Tournaments
      responses:
        200:
          description: Successful request. A page of tournaments is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetTournamentPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
    post:
      operationId: saveBetTournament
      summary: Bet tournaments.
      description: |
        This operation creates or updates a bet tournament. If a bet tournament, is received with an already existing identifier then the already existing entity will be updated with the new values.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BetTournamentCreationRequest'
      tags:
        - Tournaments
      responses:
        201:
          description: Successful request. The bet torunament was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players:
    get:
      operationId: getPlayers
      summary: Players.
      description: |
        This operation retrieves information about players, optionally filtering by those that have been modified or newly registered in a given period of time.
      parameters:
        - name: registeredOrModifiedAtOrAfter
          in: query
          description: "If specified, only players registered or modified at or after the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredOrModifiedBefore
          in: query
          description: "If specified, only players registered or modified before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredModifiedOrSelfExcludedAtOrAfter
          in: query
          description: "If specified, only players registered, modified or self-excluded at or after the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredModifiedOrSelfExcludedBefore
          in: query
          description: "If specified, only players registered, modified or self-excluded before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: nonDeletedAtDateTime
          in: query
          description: "If specified, only players that have not been deleted at the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredAtOrAfter
          in: query
          description: "If specified, only players registered after or at the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredBefore
          in: query
          description: "If specified, only players registered before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withSelfExclusionsEndingAtOrAfter
          in: query
          description: "If specified, only players with self-exclusions ending at or after the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withSelfExclusionsStartingBefore
          in: query
          description: "If specified, only players with self-exclusions starting before the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withMonetaryActivityAtOrAfter
          in: query
          description: "If specified, only players with monetary activity at or after the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withMonetaryActivityBefore
          in: query
          description: "If specified, only players with monetary activity before the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withGameActivityAtOrAfter
          in: query
          description: "If specified, only players with monetary game activity at or after the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withGameActivityBefore
          in: query
          description: "If specified, only players with monetary game activity before the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: atDateTime
          in: query
          description: "If specified, the player information at this date and time will be retrieved. If null, the last player information will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: deletedAtOrAfter
          in: query
          description: "If specified, only players deleted after or at the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: deletedBefore
          in: query
          description: "If specified, only players deleted before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: documentNumber
          in: query
          description: "If specified, only players whose document number matches the given value will be retrieved."
          required: false
          schema:
            type: string
        - name: documentType
          in: query
          description: "If specified, only players whose document type matches the given value will be retrieved. This must be a valid value according to the PersonalDocumentType enumeration: CitizenshipDocument, ImmigrationDocument, Passport, Others, or BasicDocument."
          required: false
          schema:
            $ref: "#/components/schemas/PersonalDocumentType"
        - name: playerStatus
          in: query
          description: "If specified, only players whose status matches the given value will be retrieved. This must be a valid value according to the PlayerStatus enumeration: Active, SuspendedFromInactivity, PreventivelySuspended, CancelledFromInactivity, ContractCancelled, SubjectiveBanning, Other, SelfExcluded, PendingForDocumentVerification."
          required: false
          schema:
            $ref: "#/components/schemas/PlayerStatus"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Players
      responses:
        200:
          description: Successful request. A page of players is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerFullDataPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
    post:
      operationId: savePlayer
      summary: Players.
      description: |
        This operation creates a player. In case a player creation request is received with an already existing identifier, the request will be ignored and a successful response will be returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerCreationRequest'
      tags:
        - Players
      responses:
        201:
          description: Successful request. The player was successfully created.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/jgdr:
    get:
      operationId: getPlayersJgdr
      summary: Retrieves players only for JGDR report for Portuguese market
      description: |
        This operation retrieves information about players, optionally filtering by those that have been modified or newly registered in a given period of time in order to build JGDR report
      parameters:
        - name: registeredOrModifiedAtOrAfter
          in: query
          description: "If specified, only players registered or modified at or after the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredOrModifiedBefore
          in: query
          description: "If specified, only players registered or modified before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Players
      responses:
        200:
          description: Successful request. A page of players is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerFullDataPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/playersIds:
    get:
      operationId: getPlayersIds
      summary: Players.
      description: |
        This operation retrieves the player identifier of the players, optionally filtering by those that have been modified or newly registered in a given period of time.
      parameters:
        - name: registeredOrModifiedAtOrAfter
          in: query
          description: "If specified, only players registered or modified at or after the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredOrModifiedBefore
          in: query
          description: "If specified, only players registered or modified before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: atDateTime
          in: query
          description: "If specified, the player information at this date and time will be retrieved. If null, the last player information will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
      tags:
        - Players
      responses:
        200:
          description: Successful request. A list of players is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayersIdList'
  /players/basic_personal_data:
    get:
      operationId: getPlayersBasicPersonalData
      summary: Players.
      description: |
        This operation retrieves the basic peronsal information about players, optionally filtering by those that have been made monetary activity in a given period of time.
      parameters:
        - name: registeredOrModifiedAtOrAfter
          in: query
          description: "If specified, only players registered or modified at or after the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredOrModifiedBefore
          in: query
          description: "If specified, only players registered or modified before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredAtOrAfter
          in: query
          description: "If specified, only players registered after or at the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredBefore
          in: query
          description: "If specified, only players registered before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withMonetaryActivityAtOrAfter
          in: query
          description: "If specified, only players with monetary activity at or after the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withMonetaryActivityBefore
          in: query
          description: "If specified, only players with monetary activity before the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withGameActivityAtOrAfter
          in: query
          description: "If specified, only players with monetary game activity at or after the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withGameActivityBefore
          in: query
          description: "If specified, only players with monetary game activity before the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withSelfExclusionsEndingAtOrAfter
          in: query
          description: "If specified, only players with self-exclusions ending at or after the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withSelfExclusionsStartingBefore
          in: query
          description: "If specified, only players with self-exclusions starting before the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: atDateTime
          in: query
          description: "If specified, the player information at this date and time will be retrieved. If null, the last player information will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: deletedAtOrAfter
          in: query
          description: "If specified, only players deleted after or at the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: deletedBefore
          in: query
          description: "If specified, only players deleted before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Players
      responses:
        200:
          description: Successful request. A page of players is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerBasicPersonalDataPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/basic_data:
    get:
      operationId: getPlayersBasicData
      summary: Players.
      description: |
        This operation retrieves the basic information about players, optionally filtering by those that have been made monetary activity in a given period of time.
      parameters:
        - name: registeredOrModifiedAtOrAfter
          in: query
          description: "If specified, only players registered or modified at or after the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredOrModifiedBefore
          in: query
          description: "If specified, only players registered or modified before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredAtOrAfter
          in: query
          description: "If specified, only players registered after or at the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredBefore
          in: query
          description: "If specified, only players registered before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withMonetaryActivityAtOrAfter
          in: query
          description: "If specified, only players with monetary activity at or after the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withMonetaryActivityBefore
          in: query
          description: "If specified, only players with monetary activity before the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withGameActivityAtOrAfter
          in: query
          description: "If specified, only players with monetary game activity at or after the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withGameActivityBefore
          in: query
          description: "If specified, only players with monetary game activity before the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: atDateTime
          in: query
          description: "If specified, the player information at this date and time will be retrieved. If null, the last player information will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: deletedAtOrAfter
          in: query
          description: "If specified, only players deleted after or at the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: deletedBefore
          in: query
          description: "If specified, only players deleted before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Players
      responses:
        200:
          description: Successful request. A page of players is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/{playerId}:
    get:
      operationId: getPlayerById
      summary: Player.
      description: |
        This operation retrieves information about a player given the player identifier.
      parameters:
        - name: playerId
          in: path
          description: "The identifier, in the ICS, of the player that must be retrieved."
          required: true
          schema:
            type: integer
            format: int64
        - name: atDateTime
          in: query
          description: "If specified, the player information at this date and time will be retrieved. If null, the last available player information will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
      tags:
        - Players
      responses:
        200:
          description: Successful request. The full information o the player is retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerFullData'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. No players can be found matching the given identifier.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/{playerExternalId}/personal_data:
    post:
      operationId: savePlayerPersonalData
      summary: Players.
      description: |
        This operation creates or updates a player's personal data. ICS stores al history of the changes in players personal data. In case a player personal data creation request is received matching the change date time and player of an already existing request, the already existing player data change entry will be updated with the newly given data.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerDataCreationRequest'
      tags:
        - Players
      responses:
        201:
          description: Successful request. The player was successfully created.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. No players can be found matching the given identifier.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/count_by_status:
    get:
      operationId: countPlayersByStatus
      summary: Count of players by status.
      description: |
        This operation retrieves the count of players by their last known status in the specified period of time.
      parameters:
        - name: registeredOrModifiedAtOrAfter
          in: query
          description: "If specified, only players registered or modified at or after the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredOrModifiedBefore
          in: query
          description: "If specified, only players registered or modified before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: nonDeletedAtDateTime
          in: query
          description: "If specified, only players that have not been deleted at the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredAtOrAfter
          in: query
          description: "If specified, only players registered after or at the specified date and time will be counted. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredBefore
          in: query
          description: "If specified, only players registered before the specified date and time will be counted. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withSelfExclusionsEndingAtOrAfter
          in: query
          description: "If specified, only players with self-exclusions ending at or after the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withSelfExclusionsStartingBefore
          in: query
          description: "If specified, only players with self-exclusions starting before the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withMonetaryActivityAtOrAfter
          in: query
          description: "If specified, only players with monetary activity at or after the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withMonetaryActivityBefore
          in: query
          description: "If specified, only players with monetary activity before the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: atDateTime
          in: query
          description: "If specified, the player statuses at that date and time will be counted. If null, the last status will be counted. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: deletedAtOrAfter
          in: query
          description: "If specified, only players deleted after or at the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: deletedBefore
          in: query
          description: "If specified, only players deleted before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
      tags:
        - Players
      responses:
        200:
          description: Successful request. The count of players grouped by status is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayerCountByStatus"
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/count:
    get:
      operationId: countPlayers
      summary: Count of players.
      description: |
        This operation retrieves the count of players, optionally filtering by different criteria.
      parameters:
        - name: registeredOrModifiedAtOrAfter
          in: query
          description: "If specified, only players registered or modified at or after the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredOrModifiedBefore
          in: query
          description: "If specified, only players registered or modified before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: nonDeletedAtDateTime
          in: query
          description: "If specified, only players that have not been deleted at the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredAtOrAfter
          in: query
          description: "If specified, only players registered after or at the specified date and time will be counted. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: registeredBefore
          in: query
          description: "If specified, only players registered before the specified date and time will be counted. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withSelfExclusionsEndingAtOrAfter
          in: query
          description: "If specified, only players with self-exclusions ending at or after the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withSelfExclusionsStartingBefore
          in: query
          description: "If specified, only players with self-exclusions starting before the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withMonetaryActivityAtOrAfter
          in: query
          description: "If specified, only players with monetary activity at or after the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: withMonetaryActivityBefore
          in: query
          description: "If specified, only players with monetary activity before the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: deletedAtOrAfter
          in: query
          description: "If specified, only players deleted after or at the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: deletedBefore
          in: query
          description: "If specified, only players deleted before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
      tags:
        - Players
      responses:
        200:
          description: Successful request. The count of registered players is returned.
          content:
            application/json:
              schema:
                type: integer
                format: int64
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/count_new_players:
    get:
      operationId: countNewPlayers
      summary: Count of the new players.
      description: |
        This operation retrieves the count of the new players registered on the system, optionally filtering by different criteria.
      parameters:
        - name: registeredAtOrAfter
          in: query
          description: "If specified, only players registered after or at the specified date and time will be counted. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: true
          schema:
            type: string
            format: date-time
        - name: registeredBefore
          in: query
          description: "If specified, only players registered before the specified date and time will be counted. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: true
          schema:
            type: string
            format: date-time
      tags:
        - Players
      responses:
        200:
          description: Successful request. The count of registered new players is returned.
          content:
            application/json:
              schema:
                type: integer
                format: int64
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/self_exclusions:
    get:
      operationId: getPlayerSelfExclusions
      summary: Player self-exclusions.
      description: |
        This operation retrieves information about player self-exclusions, optionally filtering by different criteria.
      parameters:
        - name: endingAtOrAfter
          in: query
          description: "If specified, only self-exclusions ending at or after the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: startingBefore
          in: query
          description: "If specified, only with self-exclusions starting before the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: userId
          in: query
          description: "If specified, only self-exclusions from the player whose identifier matches the one specified will be retrieved."
          required: false
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Players
      responses:
        200:
          description: Successful request. A page of player self-exclusions is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelfExclusionPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/logins:
    get:
      operationId: getPlayerLogins
      summary: Player log-ins.
      description: |
        This operation retrieves informacion about the player log-ins and log-outs on the system.
      parameters:
        - name: start
          in: query
          description: "If specified, only login operations occurred at or after given date will be retrieved."
          required: false
          schema:
            type: string
            format: date-time
        - name: end
          in: query
          description: "If specified, only login operations occurred before given date will be retrieved."
          required: false
          schema:
            type: string
            format: date-time
        - name: loginType
          in: query
          description: "If specified, only login operations of given type will be retrieved."
          required: false
          schema:
            type: string
        - name: loginSessionUid
          in: query
          description: "If specified, only login operation of given session will be retrieved."
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - PlayerLogins
      responses:
        200:
          description: Successful request. A page of player logins is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/{playerExternalId}/self_exclusions:
    post:
      operationId: saveSelfExclusion
      summary: Player self-exclusions.
      description: |
        This operation creates or updates a player self-exclusion. In case a player self-exclusion creation request is received with an already existing identifier, the already existing self-exclusion will be updated with the newly given values.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelfExclusionCreationRequest'
      tags:
        - Players
      responses:
        201:
          description: Successful request. The player self-exclusion was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. The specified player account code cannot be found in the system.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/wallets/balances:
    get:
      operationId: getPlayerBalances
      summary: Player balances.
      description: |
        This operation retrieves information about the balance of players by each player wallet (player monetary account) at a specified date and time, optionally filtering by different criteria.
      parameters:
        - name: atDateTime
          in: query
          description: "If specified, the player wallet balances at the specified date and time will be retrieved. If null, the last balances will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - PlayerWallets
      responses:
        200:
          description: Successful request. A page of player wallet balances is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerWalletBalancePage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/wallets/balances/sum_by_unit:
    get:
      operationId: sumPlayerBalancesByUnit
      summary: Player balances.
      description: |
        This operation retrieves the sum of player wallet balances by unit (`Real` or `Bonus`) at a specified date and time, optionally filtering by player.
      parameters:
        - name: atDateTime
          in: query
          description: "If specified, the player wallet balances at the specified date and time will be retrieved. If null, the last balances will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - $ref: "#/components/parameters/userId"
      tags:
        - PlayerWallets
      responses:
        200:
          description: Successful request. The sum of player wallet balances is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmountSumByUnit'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/wallets/balances/user_with_movements_sum_by_unit:
    get:
      operationId: sumBalancesPlayersWithMovementsByUnit
      summary: Player balances.
      description: |
        This operation retrieves the initial or final sum of player wallet balances by unit (`Real` or `Bonus`) at a specified period, optionally filtering by player.
      parameters:
        - name: minimumDateTime
          in: query
          description: "If specified, only players registered or modified at or after the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: true
          schema:
            type: string
            format: date-time
        - name: maximumDateTime
          in: query
          description: "If specified, only players registered or modified before the specified date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: true
          schema:
            type: string
            format: date-time
        - $ref: "#/components/parameters/balanceType"
        - $ref: "#/components/parameters/userId"
      tags:
        - PlayerWallets
      responses:
        200:
          description: Successful request. The sum of player wallet balances is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmountSumByUnit'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/wallets/{accountCode}/balances:
    post:
      operationId: savePlayerWalletBalance
      summary: Player wallet balances.
      description: |
        This operation creates or updates a player wallet balance. In case a player wallet balance creation request is received with for the same player wallet at the same instant in time, the already existing player wallet balance will be updated with the newly given value.

        This operation is only necessary for the Spanish and Colombian regulated markets.
      parameters:
        - name: accountCode
          in: path
          description: "The account code that identifies the player wallet."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerWalletBalanceCreationRequest'
      tags:
        - PlayerWallets
      responses:
        201:
          description: Successful request. The player wallet balance was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. The specified player wallet code cannot be found in the system.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/{playerExternalId}/wallets:
    post:
      operationId: savePlayerWallet
      summary: Player wallets.
      description: |
        This operation creates or updates a player wallet. In case a player wallet creation request is received with an already existing identifier, the already existing wallet will be updated with the newly given values.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerWalletCreationRequest'
      tags:
        - PlayerWallets
      responses:
        201:
          description: Successful request. The player wallet was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. The specified player account code cannot be found in the system.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.

  /players/{playerExternalId}/adjustments:
    post:
      operationId: saveAdjustment
      summary: Player adjustments.
      description: |
        This operation creates or updates a player adjustment. In case a adjustment creation request is received with an already existing identifier, the already existing wallet will be updated with the newly given values.

        This operation is only necessary for the Spanish and Colombian regulated markets.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdjustmentCreationRequest'
      tags:
        - Adjustments
      responses:
        201:
          description: Successful request. The adjustment was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. The specified player account code cannot be found in the system.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/{playerExternalId}/status_changes:
    post:
      operationId: saveStatusChange
      summary: Player status changes.
      description: |
        This operation creates or updates a change in a player status. In case a player status change creation request is received with an already existing date and time, the already existing status change will be updated with the newly given values.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerStatusChangeCreationRequest'
      tags:
        - Players
      responses:
        201:
          description: Successful request. The player status change was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. The specified player account code cannot be found in the system.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
    get:
      operationId: getPlayerStatusChanges
      summary: Player Status Changes
      description: |
        This operation retrieves all status changes of a player given the player identifier.
      parameters:
        - name: playerExternalId
          in: path
          description: "The identifier, in the ICS, of the player that must be retrieved."
          required: true
          schema:
            type: string
        - name: atDateTime
          in: query
          description: "If specified, the player information at this date and time will be retrieved. If null, the last available player information will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: initDate
          in: query
          description: "If specified, only the player information with date greater than or equal to the given `initDate` will be returned.It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: "If specified, only the player information with date less than the given `endDate` will be returned. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
      tags:
        - Players
      responses:
        200:
          description: Successful request. All status changes of a player are received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerStatusChange'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. No players can be found matching the given identifier.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/{playerExternalId}/limits/deposit:
    post:
      operationId: saveDepositLimits
      summary: Player deposit limits.
      description: |
        This operation creates or updates player deposit limits. In case a player deposit limits creation request is received with an already existing identifier, the already existing limits be updated with the newly given values.

        This operation is only necessary for the Spanish and Colombian regulated markets.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoneyLimits'
      tags:
        - Limits
      responses:
        201:
          description: Successful request. The player deposit limits were successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. The specified player account code cannot be found in the system.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/limits/deposit:
    get:
      operationId: getDepositLimits
      summary: Player deposit limits.
      description: |
        This operation retrieves information about the a player deposit limits, optionally filtering by different criteria.
      parameters:
        - name: playerExternalId
          in: query
          description: "If specified, only deposit limits whose player identifier (in the player account system) matches the given one will be retrieved."
          required: false
          schema:
            type: string
        - name: accepted
          in: query
          description: "If specified and true, only accepted deposit limits will be returned. If specified and false, deposit limits that have not yet been accepted will be returned. If not specified, the returned deposit limits will not be filtered by their accepted condition."
          required: false
          schema:
            type: boolean
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Limits
      responses:
        200:
          description: Successful request. A page of money limit creation requests is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoneyLimitsPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/adjustments/amount/sum_by_type:
    get:
      operationId: sumAdjustmentAmountsByType
      summary: Adjustment amounts sum.
      description: |
        This operation sums the amounts from adjustments with the possibility of filtering by different criteria.
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - $ref: "#/components/parameters/unitType"
        - $ref: "#/components/parameters/gameTypes"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/nonDeletedAtDateTime"
        - $ref: "#/components/parameters/adjustmentType"
      tags:
        - Adjustments
      responses:
        200:
          description: Successful request. The sum of adjustment amounts by transaction type is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmountSumByAdjustmentType'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/adjustments:
    get:
      operationId: getAdjustments
      summary: Adjustments.
      description: |
        This operation retrieves information about adjustment over player balances, with the possibility of filtering by different criteria.
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - $ref: "#/components/parameters/unitType"
        - $ref: "#/components/parameters/gameTypes"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/nonDeletedAtDateTime"
        - $ref: "#/components/parameters/adjustmentType"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Adjustments
      responses:
        200:
          description: Successful request. The page of adjustments is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdjustmentPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /jackpots:
    get:
      operationId: getJackpots
      summary: Jackpots
      description: |
        This operation retrieves information about jackpots.
      parameters:
        - $ref: "#/components/parameters/minFinishDate"
        - $ref: "#/components/parameters/maxFinishDate"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/gameTypes"
        - name: notClosedOrResolvedAtOrAfter
          in: query
          description: "If specified, only jackpots not closed or resolved at of after the specified date and time will be returned. This date and time must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: notClosedOrResolvedBefore
          in: query
          description: "If specified, only jackpots not closed or resolved before the specified date and time will be returned. This date and time must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)."
          required: false
          schema:
            type: string
            format: date-time
      tags:
        - Jackpots
      responses:
        200:
          description: Successful request. A page of jackpots is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JackpotPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
    post:
      operationId: saveJackpot
      summary: Jackpots.
      description: |
        This operation creates or updates a jackpot. In case a jackpot creation request is received with an already existing identifier, the already existing jackpot will be updated with the newly given values.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JackpotCreationRequest'
      tags:
        - Jackpots
      responses:
        201:
          description: Successful request. The jackpot was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. The specified player wallet code cannot be found in the system.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /jackpots/units/amount/sum_by_transaction_type:
    get:
      operationId: sumJackpotUnitAmountsByTransactionType
      summary: Jackpot unit amount sum.
      description: |
        This operation retrieves the sum of jackpot unit amounts grouped by transaction type, filtered by date range and unit type.
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - $ref: "#/components/parameters/unitType"
        - $ref: "#/components/parameters/gameTypes"
        - $ref: "#/components/parameters/userId"
        - name: jackpotNotClosedOrResolvedAtOrAfter
          in: query
          description: "If specified, only units of jackpots not closed or resolved at of after the specified date and time will be returned. This date and time must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: jackpotNotClosedOrResolvedBefore
          in: query
          description: "If specified, only units of jackpots not closed or resolved before the specified date and time will be returned. This date and time must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: jackpotExternalId
          description: "If specified, only jackpot units from the jackpot with the given identifier will be taken into account."
          required: false
          schema:
            type: string
      tags:
        - Jackpots
      responses:
        200:
          description: Successful request. The sum of jackpot unit amounts by transaction type is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmountSumByTransactionType'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /jackpots/units:
    get:
      operationId: getJackpotUnits
      summary: Jackpot units.
      description: |
        This operation retrieves jackpot units (additions of money to and retrievals of prizes from a jackpot).
      parameters:
        - in: query
          name: participationId
          description: "If specified, only jackpot units related to the given participation identifier (identifier of the participation in the ICS) will be retrieved."
          required: false
          schema:
            type: integer
            format: int64
        - in: query
          name: tournamentId
          description: "If specified, only jackpot units related to the given tournament identifier (identifier of the tournament in the ICS) will be retrieved."
          required: false
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Jackpots
      responses:
        200:
          description: Successful request. A page of jackpot units is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JackpotUnitPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /jackpots/{jackpotExternalId}/units:
    post:
      operationId: saveJackpotUnit
      summary: Jackpot units.
      description: |
        This operation creates or updates a jackpot unit. In case a jackpot unit creation request is received with an already existing identifier, the already existing limits be updated with the newly given values.
      parameters:
        - name: jackpotExternalId
          in: path
          description: "Jackpot identifier, in the player account system."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JackpotUnitCreationRequest'
      tags:
        - Jackpots
      responses:
        201:
          description: Successful request. The jackpot unit were successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. The specified player account code cannot be found in the system.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /player/wallets/payments:
    get:
      operationId: getPayments
      summary: Player payments.
      description: |
        This operation retrieves information about payments performed by players.
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/paymentTransactionType"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Payments
      responses:
        200:
          description: Successful request. A page of player payments is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /player/wallets/payments/amount/sum_by_player_id:
    get:
      operationId: sumPaymentAmountsByPlayerId
      summary: Player payment amounts by player id.
      description: |
        This operation retrieves the sum of amounts of payments performed by players, grouped by player id.
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/paymentTransactionType"
        - $ref: "#/components/parameters/minimumAmountSum"
      tags:
        - Payments
      responses:
        200:
          description: Successful request. A page of player payments is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AmountSumByPlayerId'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.

  /players/wallets/payments/amount/sum_by_provider_transaction_type:
    get:
      operationId: sumPaymentAmountsByProviderAndTransactionType
      summary: Players payment amounts by payment type provider, payment type and transaction type.
      description: |
        This operation retrieves the sum of amounts of payments performed by players, grouped by payment type provider, payment type and transaction type
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
      tags:
        - Payments
      responses:
        200:
          description: Successful request. A page of player payments is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentSumByProviderAndTransactionType'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.

  /player/wallets/payments/payment_method_types:
    get:
      operationId: getPaymentMethodTypesFromPayments
      summary: Payment method types.
      description: |
        This operation retrieves information about payment method types from payments performed by players.
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/paymentTransactionType"
      tags:
        - Payments
      responses:
        200:
          description: Successful request. A list of payment method types is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentMethodType'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/wallets/{accountCode}/payments:
    post:
      operationId: savePayment
      summary: Payments.
      description: |
        This operation creates or updates a player payment. In case a payment creation request is received with an already existing identifier, the already existing payment will be updated with the newly given values.
      parameters:
        - name: accountCode
          in: path
          description: "The account code that identifies the player wallet."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCreationRequest'
      tags:
        - Payments
      responses:
        201:
          description: Successful request. The payment was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. The specified player wallet code cannot be found in the system.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/{playerExternalId}/document_verification_data:
    post:
      operationId: saveDocumentVerificationData
      summary: Player document verification data.
      description: |
        This operation creates or updates information about the verification of a player personal document.
        It is mandatory to fill this information for the regulated markets of Colombia, Portugal and Spain.

        The amount of required information depends on the configured regulated market:

        * In Colombia and Spain it is only necessary to specify whether the documentation is verified and the verification date
          and time (`verified` and `verificationDateTime` fields).
        * In Portugal it is necessary to specify all the fields.

        The actual image contents of the player documents are not uploaded to the ICS. They must be made available to
        the report generation via an SFTP file server. The report generator will dynamically retrieve the images from
        the SFTP file server during the generation of reports, using the image identifier as file name.

        In case a creation request is received with an already existing document image identifier, the already existing
        document verification data will be updated with the newly given values.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentVerificationDataCreationRequest'
      tags:
        - Players
      responses:
        201:
          description: Successful request. The player document verification was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. The specified player account code cannot be found in the system.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/{playerExternalId}/logins:
    post:
      operationId: savePlayerLogin
      summary: Player logins.
      description: |
        This operation creates a player log-in. In case a player log-in creation request is received with an already existing date-time, the new request will be ignored and a success response will be returned.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerLoginCreationRequest'
      tags:
        - PlayerLogins
      responses:
        201:
          description: Successful request. The player log-in was successfully created.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. The specified player account code cannot be found in the system.
        409:
          description: Successful request. A list of players is returned.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/{playerExternalId}/aliases:
    post:
      operationId: savePlayerAlias
      summary: Player aliases.
      description: |
        This operation creates a player alias. In case a player alias creation request is received with an already existing date-time for the same user, the new request will be ignored and a success response will be returned.
      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerAliasCreationRequest'
      tags:
        - Players
      responses:
        201:
          description: Successful request. The player alias was successfully created.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        404:
          description: Not found. The specified player account code cannot be found in the system.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /bet_events:
    post:
      operationId: saveBetEvent
      summary: Bet events.
      description: |
        This operation creates or updates a bet event. In case a bet event creation request is received with an already existing identifier, the already existing bet event will be updated with the new values.

        ![Warning](https://openclipart.org/image/24px/svg_to_png/29833/warning.png) This operation is currently only available for the Colombian and Spanish regulated markets.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BetEventCreationRequest'
      tags:
        - Participations
      responses:
        201:
          description: Successful request. The bet event was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
    get:
      operationId: getBetEvents
      summary: Bet events.
      description: |
        This operation retrieves the bet events.
      parameters:
        - name: minimumDateTime
          in: query
          description: "If specified, only bet events created or updated at or after the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: maximumDateTime
          in: query
          description: "If specified, only bet events created or updated before the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Participations
      responses:
        200:
          description: Successful request. A page of bet events will be retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetEventPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.

  /bet_events_cev:
    get:
      operationId: getBetEventsCev
      summary: Bet events.
      description: |
        This operation retrieves the bet events for cev reports
      parameters:
        - name: minimumDateTime
          in: query
          description: "If specified, only bet events created or updated at or after the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - name: maximumDateTime
          in: query
          description: "If specified, only bet events created or updated before the given date and time will be retrieved. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
          required: false
          schema:
            type: string
            format: date-time
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Participations
      responses:
        200:
          description: Successful request. A page of bet events will be retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetEventCevPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /identity_verification_requests:
    get:
      operationId: getIdentityVerificationRequests
      summary: Portugal Identity verification request service.
      description: |
        This operation returns the responses from the regulator identity verification service. This operation is for the
        Portuguese regulated market, the government provides a service for the verification of the identity of players and
        the responses from that service have to be reported.
      parameters:
        - $ref: "#/components/parameters/minimumDateTime"
        - $ref: "#/components/parameters/maximumDateTime"
        - name: personalDocumentNumber
          in: query
          description:  "The number of the personal document that was checked."
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/personalDocumentType"
        - name: firstName
          in: query
          description: "The first name (i.e.: the given name) of the user that was checked."
          required: false
          schema:
            type: string
        - name: lastName
          in: query
          description: "The last name (i.e.: the family name) of the user that was checked."
          required: false
          schema:
            type: string
        - name: secondName
          in: query
          description: "The second last name of the user that was checked."
          required: false
          schema:
            type: string
        - name: birthDate
          in: query
          description: "Date of birth of the user that was checked. This date must be specified in ISO 8601 format including the time zone (e.g.: 1987-09-07T00:00:00+01:00)."
          required: false
          schema:
            type: string
            format: date-time
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - IdentityVerificationRequest
      responses:
        200:
          description: Successful request. A page of identity verification request service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityVerificationRequestPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
    post:
      operationId: saveIdentityVerificationRequest
      summary: Portugal Identity verification request service.
      description: >-
        Save a new response from the regulator identity verification service. This operation is only for the
        Portuguese regulated market, the government provides a service for the verification of the identity of players and
        the responses from that service have to be reported.

        * It is necessary to specify all the fields except (`officialVerification` and `officialVerificationDate`)

        In case an identity verification response is received with an already existing identifier, the already existing
        identity verification will be updated with the new values.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityVerificationRequest'
      tags:
        - IdentityVerificationRequest
      responses:
        201:
          description: Successful request. The bet event was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /players/{playerExternalId}/identity_verification:
    post:
      operationId: saveUserIdentityVerificationRequest
      summary: Spain Identity verification request service.
      description: >-
        Save a new response from the regulator identity verification service. This operation is for the
         Spanish regulated market, the government provides a service for the verification of the identity of players and
        the responses from that service have to be reported.

        It is only necessary to specify whether the identity of player is verified and the verification date
          and time (`officialVerification` and `officialVerificationDate` fields).

        In case an identity verification response is received with an already existing identifier, the already existing
        identity verification will be updated with the new values.

      parameters:
        - name: playerExternalId
          in: path
          description: "Identifier, in the player account system, of the player."
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityVerificationRequest'
      tags:
        - IdentityVerificationRequest
      responses:
        201:
          description: Successful request. The bet event was successfully created or updated.
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.

  /status/created:
    get:
      operationId: getStatusCreated
      summary:  New status created at particular date.
      description: |
        This operation retrieves information about new status created at particular date. Only for non IRIS clients use
      parameters:
        - $ref: "#/components/parameters/minFinishDate"
        - $ref: "#/components/parameters/maxFinishDate"
      tags:
        - Status
      responses:
        200:
          description: Successful request. The count of players grouped by status is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CountStatus"
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.

  /rounds:
    get:
      operationId: getRounds
      summary: Rounds of player.
      description: |
        This operation retrieves information about player rounds.
      parameters:
        - $ref: "#/components/parameters/minFinishDate"
        - $ref: "#/components/parameters/maxFinishDate"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Rounds
      responses:
        200:
          description: Successful request. A page of participations is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoundPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /rounds/srij/{participationUnitId}:
    post:
      operationId: setRoundsSrijLog
      summary: Set rounds information for srij log
      description: |
        This operation save participation unit id in rounds reported history for srij log
      parameters:
        - name: participationUnitId
          in: path
          description: "The participation unit id to be saved."
          required: true
          schema:
            type: string
      tags:
        - Rounds
      responses:
        200:
          description: Successful request.
        409:
          description: Conflict. The operation has violated a database integrity constraint.
        500:
          description: Internal server error. Please retry the operation a few moments later.
  /rounds/srij:
    get:
      operationId: getRoundsSrijLog
      summary: Returns basic rounds information for srij log
      description: |
        This operation retrieves basic information about rounds. This operation will return the latest rounds migrated since last time this operation was called
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      tags:
        - Rounds
      responses:
        200:
          description: Successful request. A page of participations is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoundPage'
        400:
          description: Bad request. Some provided parameter is invalid or some required parameter is missing. An explanatory message is returned indicating the nature of the error.
        500:
          description: Internal server error. Please retry the operation a few moments later.
components:
  schemas:
    Participation:
      description: A player participation in a game.
      type: object
      properties:
        participationId:
          type: integer
          format: int64
          description: Unique identifier of the player participation in the game, in the ICS.
        participationExternalId:
          type: string
          description: Unique identifier of the player participation in the game, in the player account system.
        game:
          type: string
          description: The specific name of the online game.
        description:
          type: string
          description: Textual description of the player participation in the game.
        gameType:
          $ref: '#/components/schemas/GameType'
        netWorkGame:
          type: boolean
          description: Indicates whether this participation belongs to a network game.
        start:
          type: string
          format: date-time
          description: The date and time at which the game participation started, in ISO 8601 format including time zone.
          example: "2018-02-19T10:01:16Z"
        finish:
          type: string
          format: date-time
          description: The date and time at which the game participation finished, in ISO 8601 format including time zone.
          example: "2018-02-19T10:01:16Z"
        postponedGame:
          type: boolean
          description: Indicates whether the game corresponding to this participation was postponed.
        cancelledGame:
          type: boolean
          description: Indicates whether the game corresponding to this participation was cancelled.
        suspendedGame:
          type: boolean
          description: Indicates whether the game corresponding to this participation was suspended.
        units:
          description: The participation units contained in this participation.
          type: array
          items:
            $ref: '#/components/schemas/ParticipationUnit'
        player:
          $ref: '#/components/schemas/Player'
        loginSessionUid:
          type: string
          description: "The unique identifier, in the player account system, of the player login session in which this payment was performed. It is only mandatory for the Spanish regulated market."
    ParticipationCreationRequest:
      description: A player participation in a game.
      type: object
      properties:
        participationExternalId:
          type: string
          description: Unique identifier of the player participation in the game, in the player account system.
        gameName:
          type: string
          description: The specific name of the online game.
        description:
          type: string
          description: Textual description of the player participation in the game. It is only mandatory for the Colombian and Spanish regulated markets.
        netWorkGame:
          type: boolean
          description: Indicates whether this participation belongs to a network game. It is only mandatory for the Colombian and Spanish regulated markets.
        start:
          type: string
          format: date-time
          description: The date and time at which the game participation started, in ISO 8601 format including time zone.
          example: "2018-02-19T10:01:16Z"
        finish:
          type: string
          format: date-time
          description: The date and time at which the game participation finished, in ISO 8601 format including time zone.
          example: "2018-02-19T10:01:16Z"
        postponedGame:
          type: boolean
          description: Indicates whether the game corresponding to this participation was postponed. It is only mandatory for the Colombian and Spanish regulated markets.
        cancelledGame:
          type: boolean
          description: Indicates whether the game corresponding to this participation was cancelled. It is only mandatory for the Colombian and Spanish regulated markets.
        suspendedGame:
          type: boolean
          description: Indicates whether the game corresponding to this participation was suspended. It is only mandatory for the Colombian and Spanish regulated markets.
        loginSessionUid:
          type: string
          description: The unique identifier, in the player account system, of the player login session. It is only mandatory for the Portuguese and Spanish regulated markets.
        isManualMigration:
          description: Indicator to save the date in the finish with the correct value depending on the type of migration in the PASDataExtractor.
          type: boolean
    Tournament:
      description: A game in which several players participate putting some amount of money. The resulting pot is given to the winners of the game.
      type: object
      properties:
        tournamentId:
          description: The identifier, in the ICS, of the tournament.
          type: integer
          format: int64
        tournamentExternalid:
          description: The identifier, in the player account system, of the tournament.
          type: string
        start:
          type: string
          format: date-time
          description: "The date and time at which the tournament started, in ISO 8601 format including time zone (e.g.: 2018-02-19T10:01:16Z)."
          example: "2018-02-19T10:01:16Z"
        finish:
          type: string
          format: date-time
          description: "The date and time at which the tournament finished, in ISO 8601 format including time zone (e.g.: 2018-02-19T10:01:16Z)."
          example: "2018-02-19T10:01:16Z"
    TournamentCreationRequest:
      description: A tournament.
      type: object
      properties:
        tournamentExternalId:
          description: The identifier, in the player account system, of the tournament.
          type: string
        start:
          type: string
          format: date-time
          description: "The date and time at which the tournament started, in ISO 8601 format including time zone (e.g.: 2018-02-19T10:01:16Z)."
          example: "2018-02-19T10:01:16Z"
        finish:
          type: string
          format: date-time
          description: "The date and time at which the tournament finished, in ISO 8601 format including time zone (e.g.: 2018-02-19T10:01:16Z)."
          example: "2018-02-19T10:01:16Z"
        isManualMigration:
          description: "Indicator to save the date in the lastUpdateDateChange with the correct value depending on the type of migration in the PASDataExtractor."
          type: boolean
    SlotsParticipationPage:
      description: A page of player participations in a game.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved participations."
          type: array
          items:
            $ref: '#/components/schemas/SlotsParticipation'
    SlotsParticipation:
      description: A player participation in a slots game.
      allOf:
        - $ref: "#/components/schemas/Participation"
        - type: object
          properties:
            gameOperatorVariation:
              type: string
              description: The game operator variation of the game.
            maximumSessionSeconds:
              type: integer
              description: The maximum number of seconds this player participation is allowed to last.
            maximumSessionparticipation:
              type: number
              format: double
              description: The maximum amount of money the player is allowed to bet in this game participation.
            totalRoundsPlayed:
              type: integer
              description: The total number of rounds played by the player inside this game participation.
    SlotsParticipationCreationRequest:
      description: Creation request for a player participation in a slots game.
      allOf:
        - $ref: "#/components/schemas/ParticipationCreationRequest"
        - type: object
          properties:
            gameOperatorVariation:
              type: array
              items:
                type: string
              description: The game operator variation of the game. It is only mandatory for the Colombian and Spanish regulated markets.
            maximumSessionSeconds:
              type: integer
              description: The maximum number of seconds this player participation is allowed to last. It is only mandatory for the Spanish regulated market.
            maximumSessionparticipation:
              type: number
              format: double
              description: The maximum amount of money the player is allowed to bet in this game participation. It is only mandatory for the Spanish regulated market.
            totalRoundsPlayed:
              type: integer
              description: The total number of rounds played by the player inside this game participation. It is only mandatory for the Colombian and Spanish regulated markets.
    RouletteParticipationPage:
      description: A page of player participations in a roulette game.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved participations."
          type: array
          items:
            $ref: '#/components/schemas/RouletteParticipation'
    RouletteParticipation:
      description: A player participation in a roulette game.
      allOf:
        - $ref: "#/components/schemas/Participation"
        - type: object
          properties:
            gameOperatorVariation:
              type: string
              description: The game operator variation of the game.
            gameOfficialVariation:
              $ref: "#/components/schemas/RouletteVariation"
            totalRoundsPlayed:
              type: integer
              description: The total number of rounds played by the player inside this game participation.
    RouletteParticipationCreationRequest:
      description: Creation request of a player participation in a roulette game.
      allOf:
        - $ref: "#/components/schemas/ParticipationCreationRequest"
        - type: object
          properties:
            gameOperatorVariation:
              type: string
              description: The game operator variation of the game. It is only mandatory for the Colombian and Spanish regulated markets.
            gameOfficialVariation:
              $ref: "#/components/schemas/RouletteVariation"
            totalRoundsPlayed:
              type: integer
              description: The total number of rounds played by the player inside this game participation. It is only mandatory for the Colombian and Spanish regulated market.
    PokerTournamentPage:
      description: A page of poker tournaments.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved tournaments."
          type: array
          items:
            $ref: '#/components/schemas/PokerTournament'
    PokerTournament:
      description: A poker game in which several players participate. Players put some money in the pot and the tournament winner wins it.
      allOf:
        - $ref: "#/components/schemas/Tournament"
        - type: object
          properties:
            gameOperatorVariation:
              type: string
              description: The operator variation of the game.
            gameOfficialVariation:
              $ref: "#/components/schemas/PokerVariation"
            participations:
              description: "The player participations in this tournament."
              type: array
              items:
                $ref: '#/components/schemas/PokerTournamentParticipation'
    PokerTournamentParticipationPage:
      description: A page of player participations in a poker tournament game.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved participations."
          type: array
          items:
            $ref: '#/components/schemas/PokerTournamentParticipation'
    PokerTournamentParticipationCreationRequest:
      description: Creation request for a player participation in a poker tournament game.
      allOf:
        - $ref: "#/components/schemas/ParticipationCreationRequest"
        - type: object
          properties:
            tournamentExternalId:
              type: string
              description: The external identifier of the poker tournament.
    PokerTournamentParticipation:
      description: A player participation in a poker tournament game.
      allOf:
        - $ref: "#/components/schemas/Participation"
        - type: object
          properties:
            gameOperatorVariation:
              type: string
              description: The operator variation of the game.
            gameOfficialVariation:
              $ref: "#/components/schemas/PokerVariation"
    PokerTournamentCreationRequest:
      description: A creation request of a poker tournament.
      allOf:
        - $ref: "#/components/schemas/TournamentCreationRequest"
        - type: object
          properties:
            gameOperatorVariation:
              type: string
              description: The operator variation of the game. It is only mandatory for the Colombian and Spanish regulated markets.
            gameOfficialVariation:
              $ref: "#/components/schemas/PokerVariation"
    PokerCashParticipationPage:
      description: A page of player participations in a poker cash game.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved participations."
          type: array
          items:
            $ref: '#/components/schemas/PokerCashParticipation'
    PokerCashParticipation:
      description: A player participation in a poker cash game.
      allOf:
        - $ref: "#/components/schemas/Participation"
        - type: object
          properties:
            gameOperatorVariation:
              type: string
              description: The game operator variation of the game.
            gameOfficialVariation:
              $ref: "#/components/schemas/PokerVariation"
            tableId:
              type: string
              description: The identifier of the poker table at which the player played.
    PokerCashParticipationCreationRequest:
      description: Creation request for a player participation in a poker cash game.
      allOf:
        - $ref: "#/components/schemas/ParticipationCreationRequest"
        - type: object
          properties:
            gameOperatorVariation:
              type: string
              description: The game operator variation of the game. It is only mandatory for the Colombian and Spanish regulated markets.
            gameOfficialVariation:
              $ref: "#/components/schemas/PokerVariation"
            tableId:
              type: string
              description: The identifier of the poker table at which the player played. It is only mandatory for the Colombian and Spanish regulated markets.
    BaccaratParticipationPage:
      description: A page of player participations in a baccarat game.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved participations."
          type: array
          items:
            $ref: '#/components/schemas/BaccaratParticipation'
    BaccaratParticipation:
      description: A player participation in a baccarat game.
      allOf:
        - $ref: "#/components/schemas/Participation"
    BaccaratParticipationCreationRequest:
      description: Creation request for a player participation in a baccarat game. It is only mandatory for the Colombian and Spanish regulated markets.
      allOf:
        - $ref: "#/components/schemas/ParticipationCreationRequest"
        - type: object
    ComplementaryParticipationPage:
      description: A page of player participations in a complementary game.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved participations."
          type: array
          items:
            $ref: '#/components/schemas/ComplementaryParticipation'
    ComplementaryParticipation:
      description: A player participation in a complementary game.
      allOf:
        - $ref: "#/components/schemas/Participation"
        - type: object
          properties:
            gameOperatorVariation:
              type: string
              description: The game operator variation of the game.
            totalRoundsPlayed:
              type: integer
              description: The total number of rounds played by the player inside this game participation.
    ComplementaryParticipationCreationRequest:
      description: Creation request of a player participation in a roulette game.
      allOf:
        - $ref: "#/components/schemas/ParticipationCreationRequest"
        - type: object
          properties:
            gameOperatorVariation:
              type: string
              description: The game operator variation of the game. It is only mandatory for the Colombian and Spanish regulated markets. For the Spanish regulated market, it will match the name under which the operator is marketing this game variant.
            gameOfficialVariation:
              type: string
              description: The game operator variation of the game. It is only mandatory for the Colombian and Spanish regulated markets.
            totalRoundsPlayed:
              type: integer
              description: The total number of rounds played by the player inside this game participation. It is only mandatory for the Colombian and Spanish regulated markets.

    BlackjackParticipationPage:
      description: A page of player participations in a blackjack game.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved participations."
          type: array
          items:
            $ref: '#/components/schemas/BlackjackParticipation'
    BlackjackParticipation:
      description: A player participation in a blackjack game.
      allOf:
        - $ref: "#/components/schemas/Participation"
        - type: object
          properties:
            gameOperatorVariation:
              type: string
              description: The game operator variation of the game.
            gameOfficialVariation:
              $ref: "#/components/schemas/BlackjackVariation"
            totalRoundsPlayed:
              type: integer
              description: The total number of rounds played by the player inside this game participation.
    BlackjackParticipationCreationRequest:
      description: Creation request for a player participation in a blackjack game.
      allOf:
        - $ref: "#/components/schemas/ParticipationCreationRequest"
        - type: object
          properties:
            gameOperatorVariation:
              type: string
              description: The game operator variation of the game. It is only mandatory for the Colombian and Spanish regulated markets.
            gameOfficialVariation:
              $ref: "#/components/schemas/BlackjackVariation"
            totalRoundsPlayed:
              type: integer
              description: The total number of rounds played by the player inside this game participation. It is only mandatory for the Colombian and Spanish regulated markets.
    BingoTournamentPage:
      description: A page of bingo tournaments (each tournament is a single bingo game with several participants in it).
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved tournaments."
          type: array
          items:
            $ref: '#/components/schemas/BingoTournament'
    BingoTournament:
      description: A bingo game in which several players participate, purchase tickets and the resulting pot is given to the winners of the game.
      allOf:
        - $ref: "#/components/schemas/Tournament"
        - type: object
          required:
            - ticketPrice
          properties:
            ticketPrice:
              type: number
              format: double
              description: The price of the bingo tickets in the bingo game.
            gameOfficialVariation:
              $ref: "#/components/schemas/BingoVariation"
            participations:
              description: "The player participations in the tournament."
              type: array
              items:
                $ref: '#/components/schemas/BingoParticipation'
    BingoTournamentCreationRequest:
      description: A creation request of a bingo tournament.
      allOf:
        - $ref: "#/components/schemas/TournamentCreationRequest"
        - type: object
          properties:
            ticketPrize:
              type: number
              format: double
              description: The price of the bingo tickets in the bingo game.
            gameOfficialVariation:
              $ref: "#/components/schemas/BingoVariation"
    BingoParticipationPage:
      description: A page of player participations in a bingo game.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved participations."
          type: array
          items:
            $ref: '#/components/schemas/BingoParticipation'
    BingoParticipation:
      description: A player participation in a bingo game.
      allOf:
        - $ref: "#/components/schemas/Participation"
        - type: object
          properties:
            ticketPrice:
              type: number
              format: double
              description: The price of the bingo tickets in the bingo game.
    BingoParticipationCreationRequest:
      description: Creation request for a player participation in a bingo game.
      allOf:
        - $ref: "#/components/schemas/ParticipationCreationRequest"
        - type: object
          properties:
            tournamentExternalId:
              type: string
              description: The external identifier of the bingo tournament.
    BetParticipationPage:
      description: A page of player participations in bet games.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved participations."
          type: array
          items:
            $ref: '#/components/schemas/BetParticipation'
    BetParticipation:
      description: A player participation in a bet game.
      allOf:
        - $ref: "#/components/schemas/Participation"
        - type: object
          properties:
            ticketExternalId:
              type: string
              description: The identifier, in the player account system, of the bet ticket (or coupon) that the player purchased.
            transferGroupUid:
              type: string
              description: The group identifier, in the player account system, of the bet group ticket that the player purchased.
            betType:
              $ref: "#/components/schemas/BetType"
            betOdds:
              type: number
              format: double
              description: The odds of the player winning the bet.
            facts:
              type: array
              items:
                $ref: "#/components/schemas/BetFact"
            numBettors:
              type: integer
              format: int64
    BetParticipationCreationRequest:
      description: Creation request for a bet participation.
      allOf:
        - $ref: "#/components/schemas/ParticipationCreationRequest"
        - type: object
          required:
            - ticketExternalId
            - transferGroupUid
            - gameType
          properties:
            ticketExternalId:
              type: string
              description: The identifier, in the player account system, of the bet ticket (or coupon) that the player purchased. It is only mandatory for the Colombian and Spanish regulated markets.
            transferGroupUid:
              type: string
              description: The group identifier, in the player account system, of the bet group ticket. It is only mandatory for the Colombian and Spanish regulated markets.
            betType:
              $ref: "#/components/schemas/BetType"
            betOdds:
              type: number
              format: double
              description: The odds of the player winning the bet. It is only mandatory for the Colombian and Spanish regulated markets.
            facts:
              description: The list of facts that must happen for the player to win the bet. It is only mandatory for the Colombian and Spanish regulated market.
              type: array
              items:
                $ref: "#/components/schemas/BetFactCreationRequest"
            gameType:
              $ref: '#/components/schemas/GameType'
            tournamentExternalId:
              type: string
              description: The external identifier of the bet tournament. It's only valid, and mandatory for Spansih regulated market, for ParimutuelSportsBet, ParimutuelHorseBet, OtherParimutuelBet game types.
    BetTournamentCreationRequest:
      description: A creation request of a bet tournament.
      required:
        - gameType
      allOf:
        - $ref: "#/components/schemas/TournamentCreationRequest"
        - type: object
          properties:
            gameType:
              $ref: "#/components/schemas/GameType"
    BetTournament:
      description: A bet game in which several players participate. Players put some money in the pot and the tournament winner wins it.
      allOf:
        - $ref: "#/components/schemas/Tournament"
        - type: object
          properties:
            gameType:
              $ref: "#/components/schemas/GameType"
            participations:
              description: "The player participations in this tournament."
              type: array
              items:
                $ref: '#/components/schemas/BetParticipation'
    BetTournamentPage:
      description: A page of bet tournaments.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved tournaments."
          type: array
          items:
            $ref: '#/components/schemas/BetTournament'
    Player:
      description: A player.
      type: object
      properties:
        playerId:
          type: integer
          format: int64
          description: Unique identifier of the player in the ICS.
        playerExternalId:
          type: string
          description: Unique identifier of the player in the player account system.
        numericPlayerExternalId:
          type: integer
          format: int64
          description: Numeric identifier of the player, in the player account system, if any.
    PlayerCreationRequest:
      description: Creation request for a player.
      type: object
      properties:
        playerExternalId:
          type: string
          description: Unique identifier of the player in the player account system. Mandatory for every regulated market.
        numericPlayerExternalId:
          type: integer
          format: int64
          description: Numeric identifier of the player, in the player account system, if any. Only mandatory for the Portuguese regulated market.
    ParticipationUnitPage:
      description: "A page of units of player participations in games (bets, prizes, ...)."
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved participation units."
          type: array
          items:
            $ref: '#/components/schemas/ParticipationUnit'
    ParticipationUnit:
      description: "A player participation unit, that is, each money operation related to a player participation on a game. Bets, winnings and cancellations are participation units."
      type: object
      properties:
        participationUnitId:
          type: integer
          format: int64
          description: Unique identifier of the player participation unit, in the ICS.
        participationUnitExternalId:
          type: string
          description: Unique identifier of the player participation unit, in the player account system.
        participationId:
          type: integer
          format: int64
          description: Unique identifier, in the ICS, of the player participation this unit belongs to.
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        organizerOperatorId:
          description: The identifier of the organizing operation.
          type: string
        accountCode:
          description: The identifier, in the player account system, of the player account (wallet) related to this participation unit.
          type: string
        transactionDate:
          description: The date and time at which the participation unit was performed, in ISO 8601 format including time zone.
          type: string
          format: date-time
          example: "2018-02-19T10:01:16Z"
        total:
          description: The total amount of money involved the participation unit.
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/Unit'
        playerRealBalanceBeforeTransaction:
          description: "The real balance of the player before the transaction"
          type: number
          format: double
        playerBonusBalanceBeforeTransaction:
          description: "The bonus balance of the player before the transaction"
          type: number
          format: double
    ParticipationUnitCreationRequest:
      description: Creation request for a player participation in a slots game.
      type: object
      required:
        - participationUnitExternalId
        - transactionType
        - accountCode
        - transactionDate
        - total
        - unit
      properties:
        participationUnitExternalId:
          type: string
          description: Unique identifier of the player participation unit, in the player account system.
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        organizerOperatorId:
          description: The identifier of the organizing operation.
          type: string
        accountCode:
          description: The identifier, in the player account system, of the player account (wallet) related to this participation unit.
          type: string
        transactionDate:
          description: The date and time at which the participation unit was performed, in ISO 8601 format including time zone.
          type: string
          format: date-time
          example: "2018-02-19T10:01:16Z"
        total:
          description: The total amount of money involved the participation unit.
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/Unit'
        playerRealBalanceBeforeTransaction:
          description: "The real balance of the player before the transaction. This is only necessary for the Portuguese regulated market."
          type: number
          format: double
        playerBonusBalanceBeforeTransaction:
          description: "The bonus balance of the player before the transaction. This is only necessary for the Portuguese regulated market."
          type: number
          format: double
        roundUid:
          description: "The identifier of the round of which this participation unit is part. This is only necessary for the Portuguese regulated market."
          type: string
        isManualMigration:
          description: "Indicator to save the date in the lastUpdateDateChange with the correct value depending on the type of migration in the PASDataExtractor."
          type: boolean
    Jackpot:
      description: A game jackpot.
      type: object
      properties:
        jackpotExternalId:
          type: string
          description: The unique identifier of the jackpot.
        description:
          type: string
          description: The jackpot description.
        gameType:
          $ref: '#/components/schemas/GameType'
        start:
          description: The date and time at which the jackpot is started, in ISO 8601 format including time zone.
          type: string
          format: date-time
        finish:
          description: The date and time at which the jackpot is finished, in ISO 8601 format including time zone.
          type: string
          format: date-time
    JackpotPage:
      description: A page of jackpots.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved jackpots."
          type: array
          items:
            $ref: '#/components/schemas/Jackpot'
    JackpotCreationRequest:
      description: Creation request for a jackpot, in the player account system.
      type: object
      required:
        - jackpotId
        - description
        - gameType
        - start
      properties:
        jackpotId:
          type: string
          description: The unique identifier of the jackpot in the player account system.
          maxLength: 100
        description:
          type: string
          description: The jackpot description.
          maxLength: 500
        gameType:
          $ref: '#/components/schemas/GameType'
        start:
          description: The date and time at which the jackpot is started, in ISO 8601 format including time zone.
          type: string
          format: date-time
          example: "2018-02-19T10:01:16Z"
        finish:
          description: The date and time at which the jackpot is finished, in ISO 8601 format including time zone.
          type: string
          format: date-time
          example: "2018-02-19T10:01:16Z"
    JackpotUnitPage:
      description: A page of jackpot units.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved jackpot units."
          type: array
          items:
            $ref: '#/components/schemas/JackpotUnit'
    JackpotUnit:
      description: A jackpot participation unit, that is, a money operation performed related to a jackpot. This money movement could be asociated to a player participation, or could directly be performed by the operator (no participaiton involved).
      type: object
      properties:
        jackpotUnitId:
          type: string
          description: The jackpot unit identifier in the player account system.
        jackpot:
          $ref: "#/components/schemas/Jackpot"
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        organizerOperatorId:
          description: The identifier of the organizing operation.
          type: string
        total:
          description: The total amount of money involved the jackpot unit.
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/Unit'
        transactionDate:
          description: The date and time at which the jackpot unit was performed, in ISO 8601 format including time zone.
          type: string
          format: date-time
          example: "2018-02-19T10:01:16Z"
    JackpotUnitCreationRequest:
      description: Creation request for a jackpot unit, in the player account system.
      type: object
      required:
        - jackpotUnitId
        - transactionType
        - total
        - unit
        - transactionDate
      properties:
        jackpotUnitId:
          type: string
          description: The jackpot unit identifier in the player account system.
          maxLength: 100
        participationExternalId:
          type: string
          description: The unique identifier of the participation associated with this jackpot unit. If null, the operation is done by the ware house.
          maxLength: 100
        tournamentExternalId:
          type: string
          description: The unique identifier of the tournament associated whit this jackpot unit, for deposit transaction type, null in other case.
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        organizerOperatorId:
          description: The identifier of the organizing operation.
          type: string
          maxLength: 100
        total:
          description: The total amount of money involved the jackpot unit.
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/Unit'
        transactionDate:
          description: The date and time at which the jackpot unit was performed, in ISO 8601 format including time zone.
          type: string
          format: date-time
          example: "2018-02-19T10:01:16Z"
        playerExternalId:
          description: "The identifier of the player, in the player account system, related to this jackpot movement."
          type: string
          maxLength: 100
    TransactionType:
      description: Enumeration representing the type of transaction of a participation unit.
      type: string
      enum:
        - Participation
        - Prize
        - CancelParticipation
        - CancelPrize
        - Commission
    BalanceType:
      description: Enumeration respresenting the type of balance
      enum:
        - Initial
        - Final
    Unit:
      description: The unit of currency in which a participation unit was performed (real money or bonus money).
      type: string
      enum:
        - Real
        - Bonus
    GameType:
      description: The type of game a participation belongs to.
      type: string
      enum:
        - SportsFixedOddsBet
        - OtherFixedOddsBet
        - HorseFixedOddsBet
        - ParimutuelSportsBet
        - ParimutuelHorseBet
        - SportsBetExchange
        - HorseBetExchange
        - OtherBetExchange
        - PokerCash
        - PokerTournament
        - Slots
        - Blackjack
        - Bingo
        - Baccarat
        - Roulette
        - TvShow
        - ComplementaryGames
    BetType:
      description: The type of sports bet a player has place in a sports betting participation.
      type: string
      enum:
        - NotSet
        - Simple
        - Multiple
        - Combined
    BetFact:
      description: A fact that must happen for a player to win prizes in a sports betting participation.
      type: object
      properties:
        factId:
          description: The identifier, in the ICS, of the fact.
          type: integer
          format: int64
        factExternalId:
          description: The identifier, in the player account system, of the bet fact.
          type: string
        fact:
          description: Textual description of the fact on which the player is placing a bet.
          type: string
        marketName:
          description: Textual description of the bet market, of the event to which this bet fact is related.
          type: string
        live:
          description: Flag indicating whether the bet on the event fact is performed live or not.
          type: boolean
        eventExternalId:
          description: The identifier, in the player account system, of the event to which this bet fact is related.
          type: string
        betEvent:
          $ref: "#/components/schemas/BetEvent"
    BetFactCreationRequest:
      description: "Creation request for a bet fact (that is, a fact that must happen in order to win a bet)."
      type: object
      required:
        - factExternalId
        - fact
        - live
        - eventExternalId
      properties:
        factExternalId:
          description: The identifier, in the player account system, of the bet fact.
          type: string
        fact:
          description: Textual description of the fact on which the player is placing a bet.
          type: string
        marketName:
          description: Textual description of the bet market, of the event to which this bet fact is related.
          type: string
        live:
          description: Flag indicating whether the bet on the event fact is performed live or not.
          type: boolean
        eventExternalId:
          description: The identifier, in the player account system, of the event to which this bet fact is related.
          type: string
    BetEventPage:
      description: A page of bet events.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved evetns."
          type: array
          items:
            $ref: '#/components/schemas/BetEvent'
    BetEventCevPage:
      description: A page of bet events for cev reports.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved evetns."
          type: array
          items:
            $ref: '#/components/schemas/BetEventCev'
    BetEvent:
      description: An event on which some bets on certain facts may be placed. An example of event is a soccer match, on which a player can bet on a specific result.
      type: object
      properties:
        eventId:
          description: The identifier, in the ICS, of the event.
          type: integer
          format: int64
        eventExternalId:
          description: The identifier, in the player account system, of the event.
          type: string
        description:
          description: Textual description of the event.
          type: string
        eventType:
          $ref: "#/components/schemas/EventType"
        sportType:
          $ref: "#/components/schemas/SportType"
        competition:
          description: Textual description of the competition, if any, of which this event is part.
          type: string
        start:
          type: string
          format: date-time
          description: The date and time at which the event started, in ISO 8601 format including time zone.
        finish:
          type: string
          format: date-time
          description: The date and time at which the event finished, in ISO 8601 format including time zone.
        sportDescription:
          type: string
          description: Textual description of the sport to which this event belongs.
        creationDateTime:
          type: string
          format: date-time
          description: The date and time at which the event was created in the SCI (i.e. it was first reported to the API), in ISO 8601 format including time zone.
        lastUpdateDateTime:
          type: string
          format: date-time
          description: The date and time at which the event was last updated in the SCI (i.e. it last first reported to the API), in ISO 8601 format including time zone.
    BetEventCev:
      description: An event on which some bets on certain facts may be placed. An example of event is a soccer match, on which a player can bet on a specific result.
      type: object
      properties:
        eventHistoryId:
          description: The identifier, in the ICS, of the event.
          type: integer
          format: int64
        eventExternalId:
          description: The identifier, in the player account system, of the event.
          type: string
        description:
          description: Textual description of the event.
          type: string
        eventType:
          $ref: "#/components/schemas/EventType"
        sportType:
          $ref: "#/components/schemas/SportType"
        competition:
          description: Textual description of the competition, if any, of which this event is part.
          type: string
        start:
          type: string
          format: date-time
          description: The date and time at which the event started, in ISO 8601 format including time zone.
        finish:
          type: string
          format: date-time
          description: The date and time at which the event finished, in ISO 8601 format including time zone.
        sportDescription:
          type: string
          description: Textual description of the sport to which this event belongs.
        updated:
          type: boolean
          description: True if the event has been modified
        dateIn:
          type: string
          format: date-time
          description: The date and time at which the event was migrated
    BetEventCreationRequest:
      description: Creation request an event on which some bets on certain facts may be placed.
      type: object
      required:
        - eventExternalId
        - description
        - eventType
        - sportType
        - competition
        - start
        - finish
        - sportDescription
      properties:
        eventExternalId:
          description: The identifier, in the player account system, of the event.
          type: string
        description:
          description: Textual description of the event.
          type: string
        eventType:
          $ref: "#/components/schemas/EventType"
        sportType:
          $ref: "#/components/schemas/SportType"
        competition:
          description: Textual description of the competition, if any, of which this event is part.
          type: string
        start:
          type: string
          format: date-time
          description: The date and time at which the event started, in ISO 8601 format including time zone.
        finish:
          type: string
          format: date-time
          description: The date and time at which the event finished, in ISO 8601 format including time zone.
        sportDescription:
          type: string
          description: Textual description of the sport to which this event belongs.
        isManualMigration:
          description: Indicator to save the date in the finish with the correct value depending on the type of migration in the PASDataExtractor.
          type: boolean
    RouletteVariation:
      description: The variations in a roulette game.
      type: string
      enum:
        - American
        - French
    PokerVariation:
      description: The variations in a poker game.
      type: string
      enum:
        - TexasHoldem
        - Omaha
        - Stud
        - Draw
    BlackjackVariation:
      description: The variations in a blackjack game.
      type: string
      enum:
        - Classic
        - American
        - Pontoon
        - Surrender
        - Super21
    BingoVariation:
      description: The variations in a bingo game. It is only mandatory for Colombian regulated market.
      type: string
      enum:
        - Bingo90
        - Bingo80
        - Bingo75
    EventType:
      description: The type of event on which bets can be placed.
      type: string
      enum:
        - Sports
        - Horses
        - Other
    SportType:
      description: The type of sport corresponding to an event.
      type: string
      enum:
        - Athletism
        - CarRacing
        - Badminton
        - Basketball
        - Handball
        - Baseball
        - BiathlonAndTriathlon
        - Pool
        - Boxing
        - Cycling
        - Cricket
        - CycloCross
        - Darts
        - WinterSports
        - HorsebackRiding
        - Fencing
        - Soccer
        - AmericanFootball
        - AustralianFootball
        - IndoorSoccer
        - Gymnastics
        - Golf
        - WeightLifting
        - HockeyOnIce
        - HockeyOnGrass
        - HockeyOnRollerSkates
        - Judo
        - Wrestling
        - Motorcycling
        - Swimming
        - PaddleTennis
        - Skating
        - PelotaVasca
        - Rowing
        - Rugby
        - Snooker
        - Squash
        - Taekwondo
        - Tennis
        - PingPong
        - Archery
        - Shooting
        - Yachting
        - Volleyball
        - BeachVolley
        - WaterPolo
        - Chess
        - FreeDiving
        - Fistball
        - BeachHandball
        - Bowls
        - Bowling
        - Curling
        - CombatSports
        - GaelicSports
        - BasqueSports
        - Floorball
        - Showbol
        - BeachSoccer
        - Lacrosse
        - Netball
        - Petanca
        - Canoeing
        - Schwingen
        - Softball
        - Surf
        - Bandy
        - MixedMartialArts
        - IndoorBowling
        - Pesapallo
        - WWE
        - SumoWrestling
        - SepakTakraw
        - Polo
        - ShowJumping
        - Hurling
        - Other
        - OtherBets
        - ESports
        - Greyhounds
        - Fishing
        - Kabbadi
    PlayerStatusChange:
      description: The data of a player status changes
      type: object
      properties:
        status:
          $ref: "#/components/schemas/PlayerStatus"
        operatorStatusName:
          description: "The original name of the status of a player, as in the operator platform. This is only provided in the Spanish regulated market."
          type: string
        statusChangeDateTime:
          description: "The date and time at which the player changed to the given status, in ISO 8601 format including the time zone (e.g.: 2018-02-27T09:06:35+02:00)."
          type: string
          format: date-time
          example: "2018-02-27T09:06:35+02:00"
        flagVerified:
          description: "Flag indicating if the 'PendingForDocumentVerification' status is still valid or the documentation has already been verified and is an old state. This field will only have value for the state 'PendingForDocumentVerification'"
          type: boolean
        codAction:
          $ref: "#/components/schemas/PlayerAction"
        reasonCode:
          description: "The reason code for the change of state. ( max size 10 )"
          type: string
    PlayerFullDataPage:
      description: A page of players containing the full data of each player.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved players."
          type: array
          items:
            $ref: '#/components/schemas/PlayerFullData'
    PlayerPage:
      description: A page of players containing the basic data of each player.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved players."
          type: array
          items:
            $ref: '#/components/schemas/Player'
    PlayerBasicPersonalDataPage:
      description: A page of players containing the basic personal data of each player.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved players."
          type: array
          items:
            $ref: '#/components/schemas/PlayerBasicPersonalData'
    PlayerBasicPersonalData:
      description: The basic personal data of a player.
      type: object
      properties:
        playerId:
          description: The identifier, in the ICS, of the player.
          type: integer
          format: int64
        playerExternalId:
          description: The identifier, in the player account system, of the player.
          type: string
        firstName:
          description: "The first name (i.e.: the given name) of the player."
          type: string
        middleName:
          description: "The middle name of the player."
          type: string
        lastName:
          description: "The last name (i.e.: the family name) of the player."
          type: string
        secondLastName:
          description: "The second last name of the player. This is the mother's family name in the regulated markets of Spain and Colombia."
          type: string
        residenceAddress:
          $ref: "#/components/schemas/PostalAddress"
        personalDocument:
          $ref: "#/components/schemas/PersonalDocument"
    PlayerFullData:
      description: The full data of a player.
      type: object
      properties:
        firstName:
          description: "The first name (i.e.: the given name) of the player."
          type: string
        middleName:
          description: "The middle name of the player."
          type: string
        lastName:
          description: "The last name (i.e.: the family name) of the player."
          type: string
        secondLastName:
          description: "The second last name of the player. This is the mother's family name in the regulated markets of Spain and Colombia."
          type: string
        alias:
          description: "The player current alias in the player account system."
          type: string
        emailAddress:
          description: "The e-mail address of the player."
          type: string
        countryOfBirth:
          description: "The ISO 3166 alpha-2 code of the country of birth of the player."
          type: string
        nationality:
          description: "The ISO 3166 alpha-2 code of the country of the player nationality."
          type: string
        cityOfBirth:
          description: "Code identifying the city of birth of the player, according to the regulator conventions."
          type: string
        birthDate:
          description: "Date of birth of the player. This date must be specified in ISO 8601 format including the time zone (e.g.: 1987-09-07T00:00:00+01:00)."
          type: string
          format: date-time
          example: "1987-09-07T00:00:00+01:00"
        residenceAddress:
          $ref: "#/components/schemas/PostalAddress"
        personalDocument:
          $ref: "#/components/schemas/PersonalDocument"
        gender:
          $ref: "#/components/schemas/Gender"
        telephoneNumber:
          description: The telephone number of the player.
          type: string
        since:
          description: "The date and time at which the player account was introduced in the player account system, in ISO 8601 format including the time zone (e.g.: 2015-09-07T09:06:35+02:00)."
          type: string
          format: date-time
          example: "2015-09-07T09:06:35+02:00"
        dataChangeDateTime:
          description: "The date and time at which the player has changed his data, in ISO 8601 format including the time zone (e.g.: 2018-02-27T09:06:35+02:00)."
          type: string
          format: date-time
          example: "2018-02-27T09:06:35+02:00"
        fiscalId:
          description: "Tax ID number of the player. Only necessary for the Portuguese regulated market."
          type: string
        playerId:
          description: The identifier, in the ICS, of the player.
          type: integer
          format: int64
        playerExternalId:
          description: The identifier, in the player account system, of the player.
          type: string
        numericPlayerExternalId:
          type: integer
          format: int64
          description: Numeric identifier of the player, in the player account system, if any.
        documentVerificationData:
          $ref: "#/components/schemas/DocumentVerificationData"
        identityVerificationData:
          $ref: "#/components/schemas/IdentityVerificationData"
        depositLimits:
          $ref: "#/components/schemas/MoneyLimits"
        lastLoginDateTime:
          description: "The date and time at which the player last logged in the player account system, in ISO 8601 format including the time zone (e.g.: 2018-02-27T09:06:35+02:00)."
          type: string
          format: date-time
          example: "2018-02-27T09:06:35+02:00"
        status:
          $ref: "#/components/schemas/PlayerStatusChange"
        currentSelfExclusion:
          $ref: "#/components/schemas/SelfExclusion"
        occupation:
          $ref: "#/components/schemas/Occupation"
    PlayerDataCreationRequest:
      description: Creation request for some player personal data.
      type: object
      required:
        - firstName
        - lastName
        - emailAddress
        - nationality
        - birthDate
        - residenceAddress
        - personalDocument
        - gender
        - since
        - dataChangeDateTime
      properties:
        firstName:
          description: "The first name (i.e.: the given name) of the player."
          type: string
          maxLength: 50
        middleName:
          description: "The middle name of the player. Only necessary for the Colombian regulated market."
          type: string
          maxLength: 50
        lastName:
          description: "The last name (i.e.: the family name) of the player."
          type: string
          maxLength: 50
        secondLastName:
          description: "The second last name of the player. This is the mother's family name in the regulated markets of Spain and Colombia."
          type: string
          maxLength: 50
        emailAddress:
          description: "The e-mail address of the player."
          type: string
          maxLength: 100
        countryOfBirth:
          description: "The ISO 3166 alpha-2 code of the country of birth of the player."
          type: string
        nationality:
          description: "The ISO 3166 alpha-2 code of the country of the player nationality."
          type: string
        cityOfBirth:
          description: |
            Code identifying the city of birth of the player. Only mandatory for the Colombian regulated market when the player is born in Colombia.

            It must comply with the DANE municipality listings (https://www.dane.gov.co/files/censo2005/provincias/subregiones.pdf).
          type: string
        birthDate:
          description: "Date of birth of the player. This date must be specified in ISO 8601 format including the time zone (e.g.: 1987-09-07T00:00:00+01:00)."
          type: string
          format: date-time
          example: "1987-09-07T00:00:00+01:00"
        residenceAddress:
          $ref: "#/components/schemas/PostalAddress"
        personalDocument:
          $ref: "#/components/schemas/PersonalDocument"
        gender:
          $ref: "#/components/schemas/Gender"
        telephoneNumber:
          description: The telephone number of the player.
          type: string
          maxLength: 50
        since:
          description: "The date and time at which the player account was introduced in the player account system, in ISO 8601 format including the time zone (e.g.: 2015-09-07T09:06:35+02:00)."
          type: string
          format: date-time
          example: "2015-09-07T09:06:35+02:00"
        dataChangeDateTime:
          description: "The date and time at which the player has changed his data, in ISO 8601 format including the time zone (e.g.: 2018-02-27T09:06:35+02:00)."
          type: string
          format: date-time
          example: "2018-02-27T09:06:35+02:00"
        fiscalId:
          description: "Tax ID number of the player. Only mandatory for the Portuguese regulated market."
          type: string
          maxLength: 50
        occupation:
          $ref: "#/components/schemas/Occupation"
    PlayerStatus:
      description: |
        Statuses at which a player in the player account system may be.

        This object exclusively contains meta-data about the document, but not the contents of the image itself. The
        contents must be retrieved from an external SFTP server when generating the regulator reports.

        The Playes Status depends on the configured regulated market:

        * In Colombia and Spain the accepted values ​​are:
            - Active
            - SuspendedFromInactivity
            - PreventivelySuspended
            - CancelledFromInactivity
            - ContractCancelled
            - SubjectiveBanning
            - Other
            - SelfExcluded
            - PendingForDocumentVerification

        * In Portugal the accepted values ​​are:
            - Active
            - Suspension
            - ComesFromReactivationSuspension
            - Cancellation
            - Deactivation
            - NewAccount
            - UnknownPlayer
            - SelfExcludedIndefinitePeriod
            - SelfExcludedIndefiniteRevocation
            - SelfExcludedRevocationDeterminedTime
            - SelfExcludedSuspendedAccount
      type: string
      enum:
        - Active
        - SuspendedFromInactivity
        - PreventivelySuspended
        - CancelledFromInactivity
        - ContractCancelled
        - SubjectiveBanning
        - Other
        - SelfExcluded
        - PendingForDocumentVerification
        - Suspension
        - ComesFromReactivationSuspension
        - Cancellation
        - Deactivation
        - NewAccount
        - UnknownPlayer
        - SelfExcludedIndefinitePeriod
        - SelfExcludedIndefiniteRevocation
        - SelfExcludedRevocationDeterminedTime
        - SelfExcludedSuspendedAccount
    PlayerAction:
      description: |
        Actions that a player's status may have associated with the player account system.

        The Playes Status depends on the configured regulated market:

        * In Colombia and Spain the accepted values ​​are:
            - NotSet

        * In Portugal the accepted values ​​are:
            - Active
            - MajorCauses
            - Pause
            - NoAccess
            - Termination
            - NoAccessForTwoYears
            - JuditialProhibition
            - Death
            - SelfExcluded
            - Other
            - Unknown
      type: string
      enum:
        - Active
        - MajorCauses
        - Pause
        - NoAccess
        - Termination
        - NoAccessForTwoYears
        - JuditialProhibition
        - Death
        - SelfExcluded
        - Other
        - Unknown
        - NotSet
    MoneyLimits:
      type: object
      description: "Daily, weekly and monthly money limits for a player."
      required:
        - limitExternalId
        - dailyLimit
        - weeklyLimit
        - monthlyLimit
      properties:
        limitExternalId:
          description: "The unique identifier of these limits in the player account system."
          type: string
        dailyLimit:
          description: "Daily monetary limit of the player. For instance, how much the player is allowed to deposit daily."
          type: number
          format: double
        weeklyLimit:
          description: "Weekly monetary limit of the player. For instance, how much the player is allowed to deposit weekly."
          type: number
          format: double
        monthlyLimit:
          description: "Yearly monetary limit of the player. For instance, how much the player is allowed to deposit monthly."
          type: number
          format: double
        since:
          description: "The instant in time at which these limits started taking effect, in ISO 8601 format including the time zone (e.g.: 2017-12-01T10:25:50+01:00)."
          type: string
          format: date-time
    PostalAddress:
      description: Postal address. Used for identifying the residence of players.
      type: object
      required:
        - country
        - street
        - postalCode
      properties:
        country:
          description: ISO 3166 alpha-2 code identifying the country.
          type: string
        fiscalRegion:
          description: |
            Code identifying the fiscal region, according to the regulator conventions. It is only mandatory for the Spanish regulation.

            In the Spanish regulated market it must comply with "modelo 763 de autoliquidación del Impuesto sobre actividades de juego
            aprobado en Orden EHA/1881/2011, de 5 dejulio" (https://www.boe.es/boe/dias/2011/07/08/pdfs/BOE-A-2011-11704.pdf):

              - 01: Comunidad Autónoma de Andalucía
              - 11: Comunidad Autónoma de las Illes Balears
              - 02: Comunidad Autónoma de Aragón
              - 12: Comunidad Autónoma de La Rioja
              - 03: Comunidad Autónoma del Principado de Asturias
              - 13: Comunidad de Madrid
              - 04: Comunidad Autónoma de Canarias
              - 14: Comunidad Autónoma de la Región de Murcia
              - 05: Comunidad Autónoma de Cantabria
              - 15: Comunitat Valenciana
              - 06: Comunidad Autónoma de Castilla - La Mancha
              - 16: Comunidad Foral de Navarra
              - 07: Comunidad de Castilla y León
              - 17: Territorio Histórico de Araba
              - 08: Comunidad Autónoma de Cataluña
              - 18: Territorio Histórico de Gipuzkoa
              - 09: Comunidad Autónoma de Extremadura
              - 19: Territorio Histórico de Bizkaia
              - 10: Comunidad Autónoma de Galicia
              - 20: Estado (residentes en Ceuta, Melilla o en el extranjero)
          type: string
        region:
          description: |
            Code identifying the region, according to the regulator conventions. It is only mandatory for the Colombian regulation.

            In the Colombian regulated market it must comply with the DANE departament listings (https://www.dane.gov.co/files/censos/resultados/NBI_total_cab_resto_mpio_nal_31dic08.xls).
          type: string
        regionDesc:
          description: |
            name of the region, according to the regulator conventions. It is only mandatory for the Portugues regulation.
          type: string
        city:
          description: The name of the city. It is mandatory for the Spanish and Portuguese regulated markets.
          type: string
          maxLength: 200
        cityCode:
          description: |
            The code of the city, according to the regulator conventions. Only mandatory for the Colombian regulated market.

            It must comply with the DANE municipality listings (https://www.dane.gov.co/files/censo2005/provincias/subregiones.pdf).
          type: string
        street:
          description: The name of the street.
          type: string
          maxLength: 100
        number:
          description: Number of the door in the specified street.
          type: string
          maxLength: 10
        postalCode:
          description: The postal code (zip code).
          type: string
          maxLength: 50
    Gender:
      description: The gender of a player.
      type: string
      enum:
        - Male
        - Female
    Occupation:
      description: The professional situation of the player. Only necessary for the Portuguese regulated market.
      type: string
      enum:
        - SelfEmployed
        - HiredHand
        - ProfessionalLiberal
        - Student
        - Retired
        - Intern
        - NoProfessionalActivity
        - Unemployed
        - Other
    PersonalDocument:
      description: "Information related to the personal document provided by the player during registration."
      type: object
      required:
        - personalDocumentType
        - number
      properties:
        personalDocumentType:
          $ref: '#/components/schemas/PersonalDocumentType'
        documentTypeDescription:
          description: "Description of the personal document type. This property is only mandatory in Spain when the specified document type is `Others`."
          type: string
        number:
          description: "The number of the personal document provided by the player."
          type: string
          maxLength: 50
        issueDate:
          description: |
            The date at which the personal document was issued, in ISO 8601 format including the time zone (e.g.: 2009-09-07T00:00:00+01:00).

            This property is only mandatory in the Colombian regulated market.
          type: string
          format: date-time
          example: "2009-09-07T00:00:00+01:00"
        expirationDate:
          description: |
            The date in which the personal document expires, in ISO 8601 format including the time zone (e.g.: 2019-09-07T00:00:00+01:00).

            This property is only mandatory in the Colombian regulated market, esclusively for immigrant players (i.e.: player whose personal document type is `ImmigrationDocument`).
          type: string
          format: date-time
          example: "2019-09-07T00:00:00+01:00"
    PersonalDocumentType:
      description: |
        The different types of personal documents that the players may provide when registering in the player account system.

        The following are the accepted values per regulated market:

        * Spain: CitizenshipDocument (DNI), ImmigrationDocument (NIE), Passport and Others.
        * Colombia: CitizenshipDocument (cédula de ciudadanía) and ImmigrationDocument (cédula de extranjería).
        * Portugal: CitizenshipDocument (cartao ciudadao), Passport, BasicDocument (BI), Others and NIF.
      type: string
      enum:
        - CitizenshipDocument
        - ImmigrationDocument
        - Passport
        - Others
        - BasicDocument
        - NIF
    DocumentVerificationData:
      description: "Information related to the verification of the player personal document."
      type: object
      required:
        - documentVerified
        - firstVerificationDateTime
      properties:
        documentVerified:
          description: "Whether the player personal document has been verified."
          type: boolean
        firstVerificationDateTime:
          description: "The date in which the player personal document was first verified, in ISO 8601 format including the time zone (e.g.: 2015-09-07T09:06:35+02:00)."
          type: string
          format: date-time
          example: "2015-09-07T09:06:35+02:00"
        personalDocumentType:
          $ref: '#/components/schemas/PersonalDocumentType'
        personalDocumentImage:
          $ref: '#/components/schemas/PersonalDocumentImage'
    PersonalDocumentImage:
      description: "The images sent by the player in the verification process."
      type: object
      properties:
        frontPage:
          $ref: '#/components/schemas/ImageData'
        reversePage:
          $ref: '#/components/schemas/ImageData'
    ImageData:
      description: "The data of the image uploaded by the player"
      type: object
      properties:
        imageId:
          description: "The identifier of the image in the player account system. This identifier is used to retrieve the image contents from an SFTP file server."
          type: string
        imageContentType:
          description: "The image content type (e.g.: jpeg, png ...)"
          type: string
    IdentityVerificationData:
      description: "Information related to the verification of the player identity by Tax Authority."
      type: object
      properties:
        officialVerification:
          description: "Whether the player identity has been verified."
          type: boolean
        officialVerificationDate:
          description: "The date in which the player identity was verified by any additional verification mechanism, in ISO 8601 format including the time zone (e.g.: 2015-09-07T09:06:35+02:00)."
          type: string
          format: date-time
          example: "2015-09-07T09:06:35+02:00"
    PlayerCountByStatus:
      description: The count of players by player status.
      type: object
      properties:
        count:
          description: "The number of players whose status is the specified in `status`."
          type: integer
          format: int64
        status:
          $ref: "#/components/schemas/PlayerStatus"
        operatorStatusName:
          description: "The original name of the status of a player, as in the operator platform. This is only necessary in the Spanish regulated market."
          type: string
    CountStatus:
      description: The count of diferent kind of status.
      type: object
      properties:
        count:
          description: "The number of status in each available `players status`."
          type: integer
          format: int64
        status:
          $ref: "#/components/schemas/PlayerStatus"
        operatorStatusName:
          description: "The original name of the status of a player, as in the operator platform. This is only necessary in the Spanish regulated market."
          type: string
    AmountSumByTransactionType:
      description: "Sum of amounts (e.g.:from participation units) grouped by transaction type."
      type: object
      properties:
        sum:
          description: "The sum of amounts from items whose transaction type is the specified in `transactionType`."
          type: number
          format: double
        transactionType:
          $ref: '#/components/schemas/TransactionType'
    AmountSumByTransactionTypeAndUnit:
      description: "Sum of amounts (e.g.:from participation units) grouped by transaction type and unit type"
      type: object
      properties:
        sum:
          description: "The sum of amounts from items whose transaction type is the specified in `transactionType`. and whose unit is the specified in 'unit'"
          type: number
          format: double
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        unit:
          $ref: "#/components/schemas/Unit"
    AmountSumByPlayerId:
      description: "Sum of amounts (e.g.: from participation units) grouped by player identifier."
      type: object
      properties:
        sum:
          description: "The sum of amounts from items whose player is the specified in `playerId`."
          type: number
          format: double
        playerId:
          description: "The identifier of the player."
          type: integer
          format: int64
    PaymentSumByProviderAndTransactionType:
      description: "Sum of amounts from payment units  grouped by payment type provider, payment type and transaction type"
      type: object
      properties:
        paymentMethodType:
          $ref: "#/components/schemas/PaymentMethodType"
        paymentMethodTypeDescription:
          type: string
          description: "Textual description of the payment method type."
        paymentMethodProvider:
          description: "The payment gateway the provided the payment."
          type: string
        transactionType:
          $ref: "#/components/schemas/PaymentTransactionType"
        sum:
          description: "The sum of amounts from items whose player is the specified in `playerId`."
          type: number
          format: double
    AmountSumByUnit:
      description: "Sum of amounts (e.g.: wallet balance amounts) grouped by unit (`Real` or `Bonus`)."
      type: object
      properties:
        sum:
          description: "The sum of amounts from items whose unit is the one specified in `unit`."
          type: number
          format: double
        unit:
          $ref: "#/components/schemas/Unit"
    AmountSumByDateAndUnit:
      description: "Sum of amounts grouped by the date when was performed and unit (`Real` or `Bonus`)"
      type: object
      properties:
        date:
          description: "The date at which the amount was performed. It must be expresed in format `yyyy-MM`(e.g.: 2017-09)."
          type: string
          format: date
        sum:
          description: "The sum of amounts in a date from items whose unit is the one specified in `unit`."
          type: number
          format: double
        unit:
          $ref: "#/components/schemas/Unit"
        playerId:
          description: "The identifier of the player."
          type: integer
          format: int64
    UnitsAmountSumByPlayer:
      description: "Sum of amounts (e.g.:from participation units) grouped by transaction type, unit type, game type and userId"
      type: object
      properties:
        sum:
          description: "Sum of amounts of participation units grouped by unit ('Real' or 'Bonus')"
          type: number
          format: double
        transactionType:
          $ref: "#/components/schemas/TransactionType"
        unit:
          $ref: "#/components/schemas/Unit"
        gameType:
          $ref: "#/components/schemas/GameType"
        playerId:
          description: "The identifier of the player."
          type: integer
          format: int64
    AdjustmentType:
      description: The type of adjustments we can find on the system.
      type: string
      enum:
        - Deposit
        - Withdrawal
        - CancelParticipation
        - CancelPrize
        - AddPrize
        - Release
        - Tournwin
        - FRPrize
    AmountSumByAdjustmentType:
      description: "Count of items (e.g.: adjustments) grouped by adjustment type."
      type: object
      properties:
        sum:
          description: "The sum of amounts from items whose transaction type is the specified in `transactionType`."
          type: number
          format: double
        adjustmentType:
          $ref: '#/components/schemas/AdjustmentType'
    Adjustment:
      description: "Adjustment of money performed by the operator over a player balance."
      type: object
      properties:
        adjustmentId:
          description: "The identifier, in the Ics, of the adjustment."
          type: integer
          format: int64
        adjustmentExternalId:
          description: "The identifier, in the player account system, of the adjustment."
          type: string
        adjustmentType:
          $ref: '#/components/schemas/AdjustmentType'
        description:
          description: "Textual description of the adjustment."
          type: string
        accountCode:
          description: "Identifier, in the player account system, of the player money account (wallet) on which the adjustment was performed."
          type: string
        organizerOperatorId:
          description: "Identifier of the operator organizer of this operation (for co-organized operations)."
          type: string
        gameType:
          $ref: '#/components/schemas/GameType'
        total:
          description: "The amount of money involved in the adjustment."
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/Unit'
        date:
          description: "The date and time at which the adjustment was performed, in ISO 8601 format including the time zone (e.g.: 2015-09-07T09:06:35+02:00)."
          type: string
          format: date-time
          example: "2015-09-07T09:06:35+02:00"
        player:
          $ref: '#/components/schemas/Player'
        accountBalanceBeforeTransaction:
          description: "The account balance before transaction. Only mandatory for the Portuguese regulated market."
          type: number
          format: double
    AdjustmentCreationRequest:
      description: |
        Creation request for and adjustment of money performed by the operator over a player balance.
      type: object
      required:
        - adjustmentExternalId
        - adjustmentType
        - accountCode
        - total
        - unit
        - date
      properties:
        adjustmentExternalId:
          description: "The identifier, in the player account system, of the adjustment."
          type: string
        adjustmentType:
          $ref: '#/components/schemas/AdjustmentType'
        description:
          description: "Textual description of the adjustment."
          type: string
        accountCode:
          description: "Identifier, in the player account system, of the player money account (wallet) on which the adjustment was performed."
          type: string
        organizerOperatorId:
          description: "Identifier of the operator organizer of this operation (for co-organized operations)."
          type: string
        gameType:
          $ref: '#/components/schemas/GameType'
        total:
          description: "The amount of money involved in the adjustment."
          type: number
          format: double
        unit:
          $ref: '#/components/schemas/Unit'
        date:
          description: "The date and time at which the adjustment was performed, in ISO 8601 format including the time zone (e.g.: 2015-09-07T09:06:35+02:00)."
          type: string
          format: date-time
          example: "2015-09-07T09:06:35+02:00"
        accountBalanceBeforeTransaction:
          description: "The account balance before transaction. Only mandatory for the Portuguese regulated market."
          type: number
          format: double
    AdjustmentPage:
      description: "Page of adjustments of money performed by the operator over player balances."
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved adjustments."
          type: array
          items:
            $ref: '#/components/schemas/Adjustment'
    SelfExclusionPage:
      description: "Page of player self-exclusions."
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved self-exclusions."
          type: array
          items:
            $ref: '#/components/schemas/SelfExclusion'
    SelfExclusion:
      description: "Period of time in which a player chooses not to be able to gamble or deposit money into his or her player account."
      type: object
      properties:
        selfExclusionId:
          type: integer
          format: int64
          description: "The identifier of the self-exclusion in the ICS."
        selfExclusionExternalId:
          type: string
          description: "The identifier, in the player account system, of the self-exclusion."
        startDate:
          description: "The date and time at which the self-exclusion starts, in ISO 8601 format including the time zone (e.g.: 2017-09-07T09:06:35+02:00)."
          type: string
          format: date-time
          example: "2017-09-07T09:06:35+02:00"
        endDate:
          description: "The date and time at which the self-exclusion finishes, in ISO 8601 format including the time zone (e.g.: 2017-09-07T09:06:35+02:00)."
          type: string
          format: date-time
          example: "2017-09-07T09:06:35+02:00"
        cancellationDate:
          description: "The date and time at which the self-exclusion was manually cancelled by the operator, in ISO 8601 format including the time zone (e.g.: 2017-09-07T09:06:35+02:00). If not specified, the operator did not cancel this self-exclusion."
          type: string
          format: date-time
          example: "2017-09-07T09:06:35+02:00"
        userId:
          description: "The identifier, in the ICS, of the self-excluded player."
          type: integer
          format: int64
        reason:
          $ref: "#/components/schemas/SelfExclusionReasonType"
    SelfExclusionCreationRequest:
      description: "Creation request for a self-exclusion (period of time in which a player chooses not to be able to gamble or deposit money into his or her player account)."
      type: object
      required:
        - startDate
        - endDate
        - selfExclusionExternalId
      properties:
        selfExclusionExternalId:
          type: string
          description: "The identifier, in the player account system, of the self-exclusion."
        startDate:
          description: "The date and time at which the self-exclusion starts, in ISO 8601 format including the time zone (e.g.: 2017-09-07T09:06:35+02:00)."
          type: string
          format: date-time
          example: "2017-09-07T09:06:35+02:00"
        endDate:
          description: "The date and time at which the self-exclusion finishes, in ISO 8601 format including the time zone (e.g.: 2017-09-07T09:06:35+02:00)."
          type: string
          format: date-time
          example: "2017-09-07T09:06:35+02:00"
        cancellationDate:
          description: "The date and time at which the self-exclusion was manually cancelled by the operator, in ISO 8601 format including the time zone (e.g.: 2017-09-07T09:06:35+02:00). If not specified, the operator did not cancel this self-exclusion."
          type: string
          format: date-time
          example: "2017-09-07T09:06:35+02:00"
        reason:
          $ref: "#/components/schemas/SelfExclusionReasonType"
    Login:
      description: "A player login or logout on the system."
      type: object
      required:
        - loginDate
      properties:
        player:
          $ref: '#/components/schemas/Player'
        sessionId:
          description: "The player session identifier. A session is compose by a login and a logout"
          type: string
        loginDate:
          description: "The date and time of the logger operation, in ISO 8601 format including the time zone (e.g.: 2017-09-07T09:06:35+02:00)."
          type: string
          format: date-time
          example: "2017-09-07T09:06:35+02:00"
        loginType:
          $ref: "#/components/schemas/LoginType"
        loggerDevice:
          $ref: "#/components/schemas/LoginDeviceType"
        loginIp:
          description: "The IP address from which the login was performed."
          type: string
        loginRegion:
          description: "The geographical region from which the login was performed."
          type: string
        loggerClient:
          $ref: "#/components/schemas/LoginClient"
        loginDeviceId:
          description: "The identifier of the device from which the login was performed. Only mandatory for the Spanish regulated market."
          type: string
    LoginPage:
      description: "Page of login models"
      type: object
      required:
        - totalPages
        - totalItems
        - items
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved login models."
          type: array
          items:
            $ref: '#/components/schemas/Login'
    PlayerWalletBalancePage:
      description: "Page of player wallet (player monetary account) balances."
      type: object
      required:
        - totalPages
        - totalItems
        - items
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved player wallet balances."
          type: array
          items:
            $ref: '#/components/schemas/PlayerWalletBalance'
    PlayerWallet:
      description: "A player wallet (player monetary account), from which bets are deducted and into which prizes are credited."
      type: object
      properties:
        player:
          $ref: '#/components/schemas/Player'
        accountCode:
          description: "The identifier, in the player account system, of the player wallet."
          type: string
        description:
          description: "Textual description of this player wallet."
          type: string
    PlayerWalletCreationRequest:
      description: "Creation request of a player wallet (player monetary account), from which bets are deducted and into which prizes are credited."
      type: object
      required:
        - accountCode
      properties:
        accountCode:
          description: "The identifier, in the player account system, of the player wallet."
          type: string
        description:
          description: "Textual description of this player wallet."
          type: string
    PlayerWalletBalance:
      description: "The balance of a player wallet (player monetary account) at a given instant in time."
      type: object
      properties:
        playerWallet:
          $ref: "#/components/schemas/PlayerWallet"
        unit:
          $ref: "#/components/schemas/Unit"
        balance:
          description: "The amount of money available in the player wallet."
          type: number
          format: double
        dateTime:
          description: "The instant in time at which the balance reading was performed. This date must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)"
          type: string
          format: date-time
    PlayerWalletBalanceCreationRequest:
      description: "The creation request of a player balance at a given instant in time."
      type: object
      required:
        - unit
        - balance
        - dateTime
      properties:
        unit:
          $ref: "#/components/schemas/Unit"
        balance:
          description: "The amount of money available in the player wallet."
          type: number
          format: double
        dateTime:
          description: "The instant in time at which the balance reading was performed. This date must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)"
          type: string
          format: date-time
    PaymentPage:
      description: "Page of player payments."
      type: object
      required:
        - totalPages
        - totalItems
        - items
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved player payments."
          type: array
          items:
            $ref: '#/components/schemas/Payment'
    Payment:
      description: "A payment (deposit or withdrawal) performed by a player."
      type: object
      properties:
        paymentId:
          description: "The identifier, in the ICS, of the payment."
          type: integer
          format: int64
        playerWallet:
          $ref: "#/components/schemas/PlayerWallet"
        paymentExternalId:
          description: "The identifier, in the player account system, of the payment."
          type: string
        transactionType:
          $ref: "#/components/schemas/PaymentTransactionType"
        paymentMethodType:
          $ref: "#/components/schemas/PaymentMethodType"
        paymentMethodProvider:
          description: "The payment gateway the provided the payment."
          type: string
        description:
          description: "Textual description of the payment."
          type: string
        amount:
          description: "The amount involved in the payment."
          type: number
          format: double
        unit:
          $ref: "#/components/schemas/Unit"
        dateTime:
          type: string
          format: date-time
          description: "The date and time at which the payment was performed, in ISO 8601 format including time zone."
          example: "2018-02-19T10:01:16Z"
        accountBalanceBeforeTransaction:
          description: "The account balance before transaction. Only mandatory for the Portuguese regulated market."
          type: number
          format: double
        loginSessionUid:
          type: string
          description: "The unique identifier, in the player account system, of the player login session in which this payment was performed. It is only mandatory for the Spanish regulated market."
        paymentMethodTypeDescription:
          type: string
          description: "Textual description of the payment method type. It is only mandatory for the Spanish regulated market when the chosen `paymentMethodType` is `OtherOperatorPaymentMethods`."
        creditCardNumber:
          type: string
          description: "The last four credit card numbers. It is only mandatory for the Spanish regulated market when the chosen `paymentMethodType` is `CreditCard`."
    ParticipationUnitPlayerBalance:
      description: "The balance of the player"
      type: object
      properties:
        playerBalance:
          type: number
          format: double
          description: Player's balance.
    PaymentCreationRequest:
      description: "Creation request of a payment (deposit or withdrawal) performed by a player."
      type: object
      required:
        - paymentExternalId
        - transactionType
        - paymentMethodType
        - paymentMethodProvider
        - amount
        - unit
        - dateTime
      properties:
        paymentExternalId:
          description: "The identifier, in the player account system, of the payment."
          type: string
          maxLength: 100
        transactionType:
          $ref: "#/components/schemas/PaymentTransactionType"
        paymentMethodType:
          $ref: "#/components/schemas/PaymentMethodType"
        paymentMethodProvider:
          description: "The payment gateway the provided the payment."
          type: string
          maxLength: 50
        description:
          description: "Textual description of the payment."
          type: string
          maxLength: 200
        amount:
          description: "The amount involved in the payment."
          type: number
          format: double
        unit:
          $ref: "#/components/schemas/Unit"
        dateTime:
          type: string
          format: date-time
          description: "The date and time at which the payment was performed, in ISO 8601 format including time zone."
          example: "2018-02-19T10:01:16Z"
        accountBalanceBeforeTransaction:
          description: "The account balance before transaction. Only mandatory for the Portuguese regulated market."
          type: number
          format: double
        loginSessionUid:
          type: string
          description: "The unique identifier, in the player account system, of the player login session in which this payment was performed. It is only mandatory for the Spanish regulated market."
          maxLength: 100
        paymentMethodTypeDescription:
          type: string
          description: "Textual description of the payment method type. It is only mandatory for the Spanish regulated market when the chosen `paymentMethodType` is `OtherOperatorPaymentMethods`."
          maxLength: 50
        creditCardNumber:
          description: "The last four credit card numbers. It is only mandatory for the Spanish regulated market when the chosen `paymentMethodType` is `CreditCard`."
          type: string
          maxLength: 4
    PaymentMethodType:
      description: |
        A type of payment method. This field can take different values depending on the regulated market.

              For Spanish regulated market the required payment method types are the following:
               - BankTransfer,
               - DebitCard,
               - WalletCard,
               - Check,
               - SMSPremium,
               - TreasuryServices,
               - PaymentByCommunicationsOperator,
               - BankGiro,
               - PremiumCalls.

              For Colombian regulated market the required payment methods types are the following:
               - BankAccount,
               - ColombianPaymentInstrument,
               - BankGiro,

              For Portuguese regulated market the required payment methods types are the following:
              - BankTransfer
              - Check

              In addition, this field accepts the following values shared by all the different regulated markets:
               - Cash,
               - PrepaidCard,
               - CreditCard,
               - OtherOperatorPaymentMethods

      type: string
      enum:
        - BankAccount
        - BankTransfer
        - DebitCard
        - CreditCard
        - PrepaidCard
        - WalletCard
        - Check
        - SMSPremium
        - TreasuryServices
        - PaymentByCommunicationsOperator
        - PremiumCalls
        - ColombianPaymentInstrument
        - BankGiro
        - Cash
        - OtherOperatorPaymentMethods
    PaymentTransactionType:
      description: "A type of payment transaction"
      type: string
      enum:
        - Deposit
        - DepositCancellation
        - Withdrawal
        - WithdrawalCancellation
    PlayerStatusChangeCreationRequest:
      description: |
        Creation request for a change in the player status.

        The following are the statuses accepted in the different regulated markets:

        * Spain: all of them.
        * Colombia: Active, ContractCancelled, SuspendedFromInactivity, PreventivelySuspended and CancelledFromInactivity.
        * Portugal: all of them.
      type: object
      required:
        - status
        - statusChangeDateTime
        - codAction
      properties:
        status:
          $ref: "#/components/schemas/PlayerStatus"
        operatorStatusName:
          description: "The original name of the status of a player, as in the operator platform. This is only necessary in the Spanish regulated market."
          type: string
          maxLength: 100
        statusChangeDateTime:
          description: "The date and time at which the player changed to the given status, in ISO 8601 format including the time zone (e.g.: 2018-02-27T09:06:35+02:00)."
          type: string
          format: date-time
          example: "2018-02-27T09:06:35+02:00"
        flagVerified:
          description: "Flag indicating if the 'PendingForDocumentVerification' status is still valid or the documentation has already been verified and is an old state."
          type: boolean
        codAction:
          $ref: "#/components/schemas/PlayerAction"
        reasonCode:
          description: "The reason code of the status change. Maximum size 10"
          type: string
    MoneyLimitsPage:
      description: A page of money limits for a player.
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved money limits."
          type: array
          items:
            $ref: '#/components/schemas/MoneyLimits'
    PlayerLoginCreationRequest:
      description: |
        Creation request for a log-in in the player account system.

        The following fields are mandatory, according to the regulated market:

        - For the Colombian regulated market only the dateTime is mandatory.
        - For the Portuguese regulated market, all the fields (except the `loginDeviceId`) are mandatory.
        - For the Spanish regulated market all the fields are mandatory.
      type: object
      required:
        - dateTime
      properties:
        dateTime:
          description: "The date and time at which the player logged-in in the player account system, in ISO 8601 format including the time zone (e.g.: 2018-02-27T09:06:35+02:00)."
          type: string
          format: date-time
        loginType:
          $ref: "#/components/schemas/LoginType"
        loginDeviceType:
          $ref: "#/components/schemas/LoginDeviceType"
        loginSessionUid:
          description: "The unique identifier, in the player account system, of the player login session. Only mandatory for the Spanish and Portuguese regulated markets."
          type: string
        loginIp:
          description: "The IP address from which the login operation was performed. Only mandatory for the Spanish and Portuguese regulated markets."
          type: string
        loginRegion:
          description: "The region from which the login was performed (that is, the region calculated form the IP address). Only mandatory for the Spanish and Portuguese regulated markets."
          type: string
        loggerClient:
          $ref: "#/components/schemas/LoginClient"
        loginDeviceId:
          description: "The identifier of the device from which the login was performed. Only mandatory for the Spanish regulated market."
          type: string
    IdentityVerificationRequestPage:
      description: "Page of identity verification request models"
      type: object
      required:
        - totalPages
        - totalItems
        - items
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved identity verification request models."
          type: array
          items:
            $ref: '#/components/schemas/IdentityVerificationRequest'
    IdentityVerificationRequest:
      description: "Data of the identity validation service response."
      type: object
      properties:
        taxAuthorityResponseId:
          description: "Response identifier of the identity validation service. It is only mandatory for the Portuguese regulated market."
          type: string
        taxAuthorityResponseCode:
          description: "The identity validation service response. It is only mandatory for the Portuguese regulated market."
          type: string
          maxLength: 5
        taxRequestDateTime:
          description: "The time and date on which the identity validation service is audited, in ISO 8601 format including time zone. It is only mandatory for the Portuguese regulated market."
          type: string
          format: date-time
        personalDocumentNumber:
          description: "The number of the personal document that was checked. It is only mandatory for the Portuguese regulated market."
          type: string
        personalDocumentType:
          $ref: "#/components/schemas/PersonalDocumentType"
        firstName:
          description: "The first name (i.e.: the given name) of the user that was checked. It is only mandatory for the Portuguese regulated market."
          type: string
        lastName:
          description: "The last name (i.e.: the family name) of the user that was checked. It is only mandatory for the Portuguese regulated market."
          type: string
        secondName:
          description: "The second last name of the user that was checked. It is only mandatory for the Portuguese regulated market."
          type: string
        birthDate:
          description: "Date of birth of the user that was checked.. This date must be specified in ISO 8601 format including the time zone (e.g.: 1987-09-07T00:00:00+01:00).
          It is only mandatory for the Portuguese regulated market."
          type: string
          format: date-time
        userId:
          description: "The identifier, in the ICS, of the player."
          type: integer
          format: int64
        officialVerification:
          description: "Whether the player identity has been verified by the external service. It is only mandatory for the Spanish regulated market."
          type: boolean
        officialVerificationDate:
          description: "The date and time at which the player identity was verified by the external service. It must be specified in ISO 8601 format including the time zone (e.g.: 2015-09-07T09:06:35+02:00).
          It is only mandatory for the Spanish regulated market."
          type: string
          format: date-time
          example: "2015-09-07T09:06:35+02:00"
    LoginType:
      type: string
      description: "Flag indicating whether type of login operation: login or logout."
      enum:
        - Login
        - Logout
    LoginDeviceType:
      type: string
      description: "The type of device that has been used for a login operation. It could be one of the following: Desktop, Mobile, Tablet, FixedTerminal, Other or Tv. These values are common to the different regulations, except `Other`, which cannot be used in the Portuguese regulated market."
      enum:
        - Desktop
        - Mobile
        - Tablet
        - FixedTerminal
        - Tv
        - Other
    PlayerAliasCreationRequest:
      description: "A creation request of a player alias (that is, a nickname and a date and time when it started to get used."
      type: object
      required:
        - nickname
        - since
      properties:
        nickname:
          type: string
          description: "The nickname used for the player."
        since:
          type: string
          format: date-time
          description: "The instant in time from which the alias starts to be used"
    DocumentVerificationDataCreationRequest:
      description: |
        A creation request of information about the verification of a player document.

        This object exclusively contains meta-data about the document, but not the contents of the image itself. The
        contents must be retrieved from an external SFTP server when generating the regulator reports.

        The amount of required information depends on the configured regulated market:

        * In Colombia and Spain it is only necessary to specify whether the documentation is verified and the verification date
          and time (`verified` and `verificationDateTime` fields).
        * In Portugal it is necessary to specify all the fields.
      type: object
      properties:
        verified:
          description: "Whether the player document has been verified by the operator or not."
          type: boolean
        verificationDateTime:
          description: "The date and time at which the player document was verified by the operator. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)."
          type: string
          format: date-time
        documentType:
          $ref: "#/components/schemas/PersonalDocumentType"
        documentImageSide:
          $ref: "#/components/schemas/DocumentImageSide"
        contentType:
          description: "The content type of the image. It is only mandatory for Portuguese regulated market."
          type: string
        documentImageExternalId:
          description: "Identifier, in the player account system, of the document image. It is only mandatory for Portuguese regulated market."
          type: string
    DocumentImageSide:
      description: |
        Side of a player personal document that is represented in a document image: front or rear. `Other` is used for
        for other values, not matching `Front` or `Back`. Currently it is only mandatory for Portuguese regulated market.
      type: string
      enum:
        - Front
        - Back
        - Other

    RoundPage:
      description: "A page of rounds of player participations."
      type: object
      properties:
        totalPages:
          type: integer
          description: "The total number of pages that the query returns."
        totalItems:
          type: integer
          format: int64
          description: "The total number of items that the query returns."
        items:
          description: "The retrieved rounds."
          type: array
          items:
            $ref: '#/components/schemas/Round'
    Round:
      description: "A page of rounds of player participations."
      type: object
      properties:
        roundUid:
          type: string
          description: Unique identifier of the game round in the system.
        participationExternalIds:
          description: The participation external ids contained in this round.
          type: array
          items:
            type: string
        game:
          type: string
          description: The specific name of the online game.
        player:
          $ref: '#/components/schemas/Player'
        description:
          type: string
          description: Textual description of the participation.
        startparticipation:
          type: string
          format: date-time
          description: The date and time at which the game round started, in ISO 8601 format including time zone.
          example: "2018-02-19T10:01:16Z"
        finishParticipation:
          type: string
          format: date-time
          description: The date and time at which the game round finished, in ISO 8601 format including time zone.
          example: "2018-02-19T10:01:16Z"
        loginSessionUid:
          type: string
          description: Login operation of given session will be retrieved.
        ip:
          type: string
          description: Ip of the player's machine.
        region:
          type: string
          description: Player's Ip machine region.
        units:
          description: The participation units contained in this round.
          type: array
          items:
            $ref: '#/components/schemas/ParticipationUnit'
    LoginClient:
      description: "The kind of client used to perform a login operation. It could be one of the following: Application or Browser."
      type: string
      enum:
        - Application
        - Browser
    SelfExclusionReasonType:
      description: "The reason for self-exclusion. Only mandatory for the Portuguese regulated market."
      type: string
      enum:
        - Not in Casino DB
        - Not resident in Spain
        - Invalid census check
        - Fraud customer
        - Forbidden customer
        - Wrong password
        - New password request
        - Pending ID confirmation for activation
        - Time to send identity document expired
        - Player inactivity
        - User request
        - Unknown
        - Minors
        - Accounts suspended temporarily on user request
        - Inclusion in the General Registry of Game Access Interdictions
        - Identity Fraud
        - Accounts closed due to inactivity or at the user's request
        - Violation of terms and conditions
        - Fraud relaed with payment methods
        - Cases related with bonus abuse
        - Others
        - Player request it from website
        - Requested from regulator
    ParticipationIdList:
      description: "The List of participation Ids."
      type: array
      items:
        type: string
    PlayersIdList:
      description: "The list of player Ids"
      type: array
      items:
        type: integer
        format: int64
    InputDataApiErrorMessage:
      type: object
      properties:
        message:
          type: string
          description: An error message that is returned to the API client. These messages are not translated. Typically they serve as a help to know the reason of the error.
  parameters:
    minimumId:
      name: minimumId
      in: query
      description: "If specified, only items with identifiers greater than the given `minimumId` will be returned."
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
    maximumId:
      name: maximumId
      in: query
      description: "If specified, only items with identifiers less or equal to the given `maximumId` will be returned."
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
    minFinishDate:
      name: minFinishDate
      in: query
      description: "If specified, only items finished after the specified date will be returned. This date must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)."
      required: false
      schema:
        type: string
        format: date-time
    maxFinishDate:
      name: maxFinishDate
      in: query
      description: "If specified, only items finished before the specified date will be returned. This date must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)."
      required: false
      schema:
        type: string
        format: date-time
    pageNumber:
      name: pageNumber
      in: query
      description: "The number of page to retrieve. The minimum accepted page number is 1."
      required: true
      schema:
        type: integer
        minimum: 1
    pageSize:
      name: pageSize
      in: query
      description: "The number of items inside each page. The minimum accepted page size is 1 and the maximum is 1000."
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 1000
    dateTime:
      name: dateTime
      in: query
      description: "The date and time of which you want to know the user's balance. This date must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)."
      required: true
      schema:
        type: string
        format: date-time
    minimumDateTime:
      name: minimumDateTime
      in: query
      description: "If specified, only items performed at or after the specified date and time will be counted. This date must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)."
      required: false
      schema:
        type: string
        format: date-time
    maximumDateTime:
      name: maximumDateTime
      in: query
      description: "If specified, only items performed before the specified date and time will be accounted for. This date must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T00:00:00Z)."
      required: false
      schema:
        type: string
        format: date-time
    unitType:
      name: unitType
      in: query
      description: "If specified, only items whose unit type matches the one specified will be accounted for. This value must match one of the specified values for the `Unit` enumeration."
      required: false
      schema:
        $ref: "#/components/schemas/Unit"
    unit:
      name: unit
      in: query
      description: "Unit type that will be taken into account. This value must match one of the specified values for the `Unit` enumeration."
      required: true
      schema:
        $ref: "#/components/schemas/Unit"
    gameTypes:
      name: gameTypes
      in: query
      description: "If specified, only items whose game type matches the one specified will be accounted for. This value must match one of the specified values for the `GameType` enumeration."
      required: false
      schema:
        type: array
        items:
          $ref: "#/components/schemas/GameType"
    nonDeletedAtDateTime:
      name: nonDeletedAtDateTime
      in: query
      description: "If specified, only players that have not been deleted at the specified date and time will be taken into account. It must be specified in ISO 8601 format including the time zone (e.g.: 2017-09-07T12:30:00Z)."
      required: false
      schema:
        type: string
        format: date-time
    adjustmentType:
      name: adjustmentType
      in: query
      description: "Only adjustments from the given type will be taken into account. This must be a valid adjustment type value, as defined in `AdjustmentType`."
      required: false
      schema:
        $ref: "#/components/schemas/AdjustmentType"
    userId:
      name: userId
      in: query
      description: "If specified, only items from the user whose identifier has been provided be taken into account."
      required: false
      schema:
        type: integer
        format: int64
    idPlayer:
      name: idPlayer
      in: query
      description: "Identifier of the user from whom you want to know the balance of the account."
      required: true
      schema:
        type: integer
        format: int64
    transactionType:
      name: transactionType
      in: query
      description: "Only items matching the given transaction type will be taken into account. This must be a valid transaction type value, as defined in `TransactionType`."
      required: false
      schema:
        $ref: "#/components/schemas/TransactionType"
    paymentTransactionType:
      name: paymentTransactionType
      in: query
      description: "Only items matching the given payment transaction type will be taken into account. This must be a valid payment transaction type value, as defined in `PaymentTransactionType`."
      required: false
      schema:
        $ref: "#/components/schemas/PaymentTransactionType"
    minimumAmountSum:
      name: minimumAmountSum
      in: query
      description: "Only items in which the sum is greater than or equal to the given minimum type will be taken into account."
      required: false
      schema:
        type: number
        format: double
    personalDocumentType:
      name: personalDocumentType
      in: query
      description: "If specified, only items whose game type matches the one specified will be accounted for. This value must match one of the specified values for the `PersonalDocumentType` enumeration."
      required: false
      schema:
        $ref: "#/components/schemas/PersonalDocumentType"
    balanceType:
      name: balanceType
      in: query
      description: "Only items matching the given balance type will be calculated. This must be a valid balance type value, as defined in `BalanceType`."
      required: true
      schema:
        $ref: "#/components/schemas/BalanceType"